# Time:  O(n)
# Space: O(n)
# Given a non-empty string check if it can be constructed by taking a substring of it and appending multiple copies of the substring together
# You may assume the given string consists of lowercase English letters only and its length will not exceed 10000
# Input: "abab"
# Output: True
# Explanation: It is the substring "ab" twice
# Input: "aba"
# Output: False
# Input: "abcabcabcabc"
# Output: True
# Explanation: It is the substring "abc" four times (And the substring "abcabc" twice)

# 解法I KMP算法 时间复杂度 O(n)
# 记字符串长度为size
# 利用KMP算法求next数组，记next数组的最后一个元素为p 若p > 0 并且 size % (size - p) == 0，返回True
# next数组具有如下性质： str[ 0 : next[i] ] == str[ i + 1 - next[i] : i + 1 ]

lass Solution(object):
    def repeatedSubstringPattern(self, str):
        """
        :type str: str
        :rtype: bool
        """
        size = len(str)
        next = [0] * size
        for i in range(1, size):
            k = next[i - 1]
            while str[i] != str[k] and k:
                k = next[k - 1]
            if str[i] == str[k]:
                next[i] = k + 1
        p = next[-1]
        return p > 0 and size % (size - p) == 0

# 解法II 蛮力法（Brute Force）  时间复杂度 O(k * n)，其中n是字符串长度，k是n的约数个数
# 若字符串可以由其子串重复若干次构成，则子串的起点一定从原串的下标0开始 并且子串的长度一定是原串长度的约数
# 整数约数的个数可以通过统计其质因子的幂得到，而输入规模10000以内整数的约数个数很少 因此通过蛮力法，枚举子串长度即可

class Solution(object):
    def repeatedSubstringPattern(self, str):
        """
        :type str: str
        :rtype: bool
        """
        size = len(str)
        for x in range(1, size / 2 + 1):
            if size % x:
                continue
            if str[:x] * (size / x) == str:
                return True
        return False
