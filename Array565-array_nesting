# A zero-indexed array A consisting of N different integers is given.
# The array contains all integers in the range [0, N - 1].
# Sets S[K] for 0 <= K < N are defined as follows:
# S[K] = { A[K], A[A[K]], A[A[A[K]]], ... }.
# Sets S[K] are finite for each K and should NOT contain duplicates.
# Write a function that given an array A consisting of N integers,
# return the size of the largest set S[K] for this array.
# Example 1:
# Input: A = [5,4,0,3,1,6,2] Output: 4
# Explanation:
# A[0] = 5, A[1] = 4, A[2] = 0, A[3] = 3, A[4] = 1, A[5] = 6, A[6] = 2.
# One of the longest S[K]:
# S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}
# Note:
# N is an integer within the range [1, 20,000].
# The elements of A are all distinct.
# Each element of array A is an integer within the range [0, N-1].

# 题目大意: 给出了一个数组，找出从任意位置出发，把该位置的数字当做下一个索引的位置，最后肯定会终止于环路。找出最长的环长。

# 解题方法:
# 本身思路很简单，就是用一个数组来保存某个位置是否被访问过，如果被访问过说明就是成了一个环，终止并记录最大环长。
# 直接这么做会超时，一个很机智的做法是
# 把visited数组放到for循环的外边，这样可以当新的环路计算的时候，如果以前的环访问过该位置的话，就不再计算了。
# 道理是，给出的数组nums的数字范围是0~N-1，也就是说没有重复的数字，那么前面访问过的一个串的长度不会小于后面。

# 比如题目中给出的例子，在对以index = 0开始的串进行遍历的时候，会对0,5,6,2这几个位置进行标记过已经访问了。
# 当index = 5,6,2 时，以index开头的串的长度不会超过以0开头的串的长度。
# A = [5,4,0,3,1,6,2]
# One of the longest S[K]:
# S[0] = {A[0], A[5], A[6], A[2]} = {5, 6, 2, 0}

class Solution(object):
    def arrayNesting(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # 放在这里
        visited = [False] * len(nums)
        ans = 0
        for i in xrange(len(nums)):
            road = 0
            while not visited[i]:
                road += 1
                # 下面两行的顺序不能变
                visited[i] = True
                i = nums[i]
            ans = max(ans, road)
        return ans

