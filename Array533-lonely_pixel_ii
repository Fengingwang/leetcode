# Given a picture consisting of black and white pixels, and a positive integer N, 
# find the number of black pixels located at some specific row R and column C that align with all the following rules:
# 1 Row R and column C both contain exactly N black pixels.
# 2 For all rows that have a black pixel at column C, they should be exactly the same as row R
# The picture is represented by a 2D char array consisting of 'B' and 'W', which means black and white pixels respectively

# 这道题是之前那道Lonely Pixel I的拓展，我开始以为这次要考虑到对角线的情况，可是这次题目却完全换了一种玩法。
# 给了一个整数N，说对于均含有N个个黑像素的某行某列，
# 如果该列中所有的黑像素所在的行都相同的话，该列的所有黑像素均为孤独的像素，让我们统计所有的这样的孤独的像素的个数。
# 那么跟之前那题类似，我们还是要统计每一行每一列的黑像素的个数，
# 而且由于条件二中要比较各行之间是否相等，如果一个字符一个字符的比较写起来比较麻烦，我们可以用个trick，
# 把每行的字符连起来，形成一个字符串，然后直接比较两个字符串是否相等会简单很多。
# 然后我们遍历每一行和每一列，如果某行和某列的黑像素刚好均为N，我们遍历该列的所有黑像素，
# 如果其所在行均相等，则说明该列的所有黑像素均为孤独的像素，将个数加入结果res中，
# 然后将该行的黑像素统计个数清零，以免重复运算，这样我们就可以求出所有的孤独的像素了

# Time:  O(m * n)
# Space: O(m * n)

import collections

class Solution(object):
    def findBlackPixel(self, picture, N):
        """
        :type picture: List[List[str]]
        :type N: int
        :rtype: int
        """
        rows, cols = [0] * len(picture),  [0] * len(picture[0])
        lookup = collections.defaultdict(int)
        for i in xrange(len(picture)):
            for j in xrange(len(picture[0])):
                if picture[i][j] == 'B':
                    rows[i] += 1
                    cols[j] += 1
            lookup[tuple(picture[i])] += 1

        result = 0
        for i in xrange(len(picture)):
            if rows[i] == N and lookup[tuple(picture[i])] == N:
                for j in xrange(len(picture[0])):
                     result += picture[i][j] == 'B' and cols[j] == N
        return result


class Solution2(object):
    def findBlackPixel(self, picture, N):
        """
        :type picture: List[List[str]]
        :type N: int
        :rtype: int
        """
        lookup = collections.Counter(map(tuple, picture))
        cols = [col.count('B') for col in zip(*picture)]
        return sum(N * zip(row, cols).count(('B', N)) \
                   for row, cnt in lookup.iteritems() \
                   if cnt == N == row.count('B'))
