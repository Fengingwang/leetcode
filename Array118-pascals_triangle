# Time:  O(n^2)
# Space: O(1)
#
# Given numRows, generate the first numRows of Pascal triangle.
#
# For example, given numRows = 5,
# Return
#
# [
#      [1],
#     [1,1],
#    [1,2,1],
#   [1,3,3,1],
#  [1,4,6,4,1]
# ]
#
# 首先，你要知道帕斯卡三角形的规律： 
# 它是一个三角形矩阵，其顶端第0行是 1；第1行两个1，这两个1是由他们上头左右两数之和 (不在三角形内的数视为0)。
# 依此类推产生第2行：0+1=1；1+1=2；1+0=1。第3行：0+1=1；1+2=3；2+1=3；1+0=1。循此产生后面的行。
# solution1: 直接按照上面的规律，每一行的数据都是新生成的。这里要注意判断不在三角形内的数要视为0。
# solution2: 实际上，每一行的第一和最后一个数都是1，考虑到这一点可以稍微减少计算量，同时避免了对额外情况的判断和处理。

class Solution(object):
    def generate(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        if numRows == 0:
            return []
        res = [[1]]
        for i in range(1, numRows):
            res.append([])
            for j in range(i+1):
                res[i].append((res[i-1][j-1] if j>0 else 0) + (res[i-1][j] if j<i else 0))
        return res

    def generate2(self, numRows):
        """
        :type numRows: int
        :rtype: List[List[int]]
        """
        res = []
        for i in range(0, numRows):
            res.append([1]*(i+1))
            for j in range(1, i):
                res[i][j] = res[i-1][j-1] + res[i-1][j]
        return res

if __name__ == "__main__":
    print Solution().generate(5)
