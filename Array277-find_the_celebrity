# Time:  O(n)
# Space: O(1)
#
# Suppose you are at a party with n people (labeled from 0 ton - 1) and among them, there may exist one celebrity. 
# The definition of a celebrity is that all the othern - 1 people know him/her but he/she does not know any of them.
# Now you want to find out who the celebrity is or verify that there is not one. 
# The only thing you are allowed to do is to ask questions like: 
# "Hi, A. Do you know B?" to get information of whether A knows B. 
# You need to find out the celebrity (or verify there is not one) by asking as few questions as possible (in the asymptotic sense).
# You are given a helper function bool knows(a, b) which tells you whether A knows B. 
# Implement a functionint findCelebrity(n), your function should minimize the number of calls toknows.

# Note: There will be exactly one celebrity if he/she is in the party. 
# Return the celebrity label if there is a celebrity in the party. 
# If there is no celebrity, return-1.

# [思路]: 当 a -> b时, 可以推出,  a不可能是celebrity, b被人知道的数目记录
# 设定候选人res为0，原理是先遍历一遍，对于遍历到的人i，
# 若候选人res认识i，则将候选人res设为i，
# 完成一遍遍历后，我们来检测候选人res是否真正是名人，
# 我们如果判断不是名人，则返回-1，如果并没有冲突，返回res，

class Solution(object):
    def findCelebrity(self, n):
        """
        :type n: int
        :rtype: int
        """
        candidate = 0
        # Find the candidate.
        for i in xrange(1, n):
            if knows(candidate, i):  # All candidates < i are not celebrity candidates
                candidate = i
        # Verify the candidate.
        for i in xrange(n):
            if i != candidate and (knows(candidate, i) or not knows(i, candidate)):
                return -1
        return candidate
