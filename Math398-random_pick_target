# Time:  O(n)
# Space: O(1)

# Given an array of integers with possible duplicates,
# randomly output the index of a given target number.
# You can assume that the given target number must exist in the array.
# Note:
# The array size can be very large.
# Solution that uses too much extra space will not pass the judge.
# Example:
# int[] nums = new int[] {1,2,3,3,3};
# Solution solution = new Solution(nums);
# // pick(3) should return either index 2, 3, or 4 randomly.
# Each index should have equal probability of returning.
# solution.pick(3);
# // pick(1) should return 0. Since in the array only nums[0] is equal to 1.
# solution.pick(1);

给了一个数组，包含若干数，可能有重复，然后再给一个数，查找其位置，如果这个数在数组中只出现了一次就返回那个位置，如果不止一次就随机返回一个。

解题方法
看到这个题，想到 382 Linked List Random Node，知道它考察的是蓄水池抽样算法。然而我还是不会这个算法。。
所以使用了一个比较讨巧的方法，用O(n)的复杂度，对整个数组进行遍历，
这样如果有数字和target相等就保存下其索引位置。再从这些索引位置中等概率返回任意一个即可。
from random import randint
class Solution(object):
    def __init__(self, nums):
        """
        :type nums: List[int]
        :type numsSize: int
        """
        self.nums = nums
    def pick(self, target):
        """
        :type target: int
        :rtype: int
        """
        idxs = []
        for i, num in enumerate(self.nums):
            if num == target:
                idxs.append(i)
        return idxs[random.randint(0, len(idxs) - 1)]


这道题指明了我们不能用太多的空间，那么省空间的随机方法只有水塘抽样了，
LeetCode之前有过两道需要用这种方法的题目Shuffle an Array和Linked List Random Node。
那么如果了解了水塘抽样，这道题就不算一道难题了
我们定义两个变量，计数器cnt和返回结果res，我们遍历整个数组，如果数组的值不等于target，直接跳过；
如果等于target，计数器加1，
然后我们在[0,cnt)范围内随机生成一个数字，
如果这个数字是0，我们将res赋值为i即可

def pick(self, target):
    res = None
    count = 0
    for i, x in enumerate(self.nums):
        if x == target:
            count += 1
            chance = random.randint(1, count)
            if chance == count:
                res = i
    return res
