# Time:  O(n)
# Space: O(n)
# Given a binary tree, return the tilt of the whole tree
# The tilt of a tree node is defined as the absolute difference
# between the sum of all left subtree node values and
# the sum of all right subtree node values, Null node has tilt 0
# The tilt of the whole tree is defined as the sum of all nodes tilt
# Input:
#          1
#        /   \
#       2     3
# Output: 1
# Explanation:
# Tilt of node 2 : 0
# Tilt of node 3 : 0
# Tilt of node 1 : |2-3| = 1
# Tilt of binary tree : 0 + 0 + 1 = 1
# Note: The sum of node values in any subtree will not exceed the range of 32-bit integer
# 题目大意： 给定二叉树，计算二叉树的“倾斜值”（tilt） and 二叉树节点的倾斜值是指其左右子树和的差的绝对值。空节点的倾斜值为0
# 解题思路： 遍历二叉树 + 递归求二叉树子树和

# Definition for a binary tree node
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def findTilt(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        self.ans = 0
        def subTreeSum(root):
            if root is None:
                return 0
            lsum = subTreeSum(root.left)
            rsum = subTreeSum(root.right)
            self.ans += abs(lsum - rsum)

            return root.val + lsum + rsum
        subTreeSum(root)
        return self.ans

class Solution(object):
    def findTilt(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        def postOrderTraverse(root, tilt):
            if not root:
                return 0, tilt
            left, tilt = postOrderTraverse(root.left, tilt)
            right, tilt = postOrderTraverse(root.right, tilt)
            tilt += abs(left-right)
            return left+right+root.val, tilt
        return postOrderTraverse(root, 0)[1]
