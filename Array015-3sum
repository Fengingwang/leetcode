# Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0?
# Find all unique triplets in the array which gives the sum of zero
# Note:
# Elements in a triplet (a,b,c) must be in non-descending order (ie, a <= b <= c)
# The solution set must not contain duplicate triplets
# For example, given array S = {-1 0 1 2 -1 -4},
# A solution set is: (-1, 0, 1) (-1, -1, 2)

# 解法: O(n^2) 
# 先把数组排列一下，用三个pointer
# 第一个pointer: 在 i 制定现在找到的值
# 第二个pointer: left=i+1 
# 第三个pointer: right=len(num)-1
# 当num[i]+num[left]+num[right]==0 时候就得到想要的解。否则当和小于0时left=left+1 和大于0则right=right-1

class Solution:  
    # @return a list of lists of length 3, [[val1,val2,val3]]  
    def threeSum(self, num):  
        solution=[]  
        num.sort()  #sort the array first
        for i in range(len(num)-1):  
            if i>0 and num[i]==num[i-1]:  
                continue   #continues with the next iteration of the loop
            left=i+1  
            right=len(num)-1  
            while left<right:  
                val=num[i]+num[left]+num[right]  
                if val==0 and [num[i],num[left],num[right]] not in solution:  
                    solution.append([num[i],num[left],num[right]])  
                    left=left+1  
                    right=right-1  
                elif val<0:  
                    left=left+1  
                else:  
                    right=right-1  
        return solution  
