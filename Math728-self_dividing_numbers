# Time:  O(nlogr) = O(n)
# Space: O(logr) = O(1)
# A self-dividing number is a number that is divisible by every digit it contains.
# For example, 128 is a self-dividing number 
# 128 % 1 == 0, 128 % 2 == 0, and 128 % 8 == 0.
# Also, a self-dividing number is not allowed to contain the digit zero.
# Given a lower and upper number bound, output a list of every possible self dividing number,
# including the bounds if possible.
# Input: left = 1, right = 22
# Output: [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]
# Note:
# - The boundaries of each input argument are 1 <= left <= right <= 10000.

方法一： 
用了两个函数，一个用来判断是否是dividing number，另一个用来循环和遍历。
要注意的一点是要判断0是否在num中，否则有除0错误。
dividing number 判断的有点麻烦，就是遍历每位数字。

class Solution:
    def isDividingNumber(self, num):
        if '0' in str(num):
            return False
        return 0 == sum(num % int(i) for i in str(num))
    def selfDividingNumbers(self, left, right):
        """
        :type left: int
        :type right: int
        :rtype: List[int]
        """
        answer = []
        for num in range(left, right+1):
            print(num)
            if self.isDividingNumber(num):
                answer.append(num)
        return answer

方法二：
参考了https://leetcode.com/problems/self-dividing-numbers/discuss/109445。 
有更简单的两个函数： 
all()判断是不是所有的元素都满足， 
filter过滤掉不满足条件的元素。
class Solution(object):
    def selfDividingNumbers(self, left, right):
        is_self_dividing = lambda num: '0' not in str(num) and all(num % int(digit) == 0 for digit in str(num))
        return filter(is_self_dividing, range(left, right + 1))
