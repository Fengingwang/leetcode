# Time:  O(m * n)
# Space: O(m * n)
# Youre given a matrix represented by a two-dimensional array,
# and two positive integers r and c representing the row number and column number of the wanted reshaped matrix
# The reshaped matrix need to be filled with all the elements of the original matrix in the same row-traversing order as they were
# If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Ow, original matrix
# Input:
# nums =
# [[1,2],
#  [3,4]]
# r = 1, c = 4
# Output:
# [[1,2,3,4]]
# The row-traversing of nums is [1,2,3,4]. The new reshaped matrix is a 1 * 4 matrix, fill it row by row 

class Solution(object):
    def matrixReshape(self, nums, r, c):
        """
        :type nums: List[List[int]]
        :type r: int
        :type c: int
        :rtype: List[List[int]]
        """
        l = []
        for i in nums:
            for j in range(len(i)):
                l.append(i[j]) 
        if r * c != len(l):
            return nums
        k = []
        for i in range(len(l)/c):
            k.append(l[i*c:(i+1)*c])
        return k
