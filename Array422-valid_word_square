
# Given a sequence of words, check whether it forms a valid word square
# A sequence of words forms a valid word square if the kth row and column read the exact same string, where 0 ≤ k < max(numRows, numColumns)
# 解题思路： O(m * n)循环遍历即可，m为单词个数，n为单词长度 需要注意的是每一行单词的长度可能不同。
# 这道题给了我们一个二位数组，每行每列都是一个单词，需要满足第k行的单词和第k列的单词要相等，这里不要求每一个单词的长度都一样，只要对应位置的单词一样即可。
# 那么这里实际上也就是一个遍历二维数组，然后验证对应位上的字符是否相等的问题，
# 由于各行的单词长度不一定相等，所以我们在找对应位置的字符时，要先判断是否越界，
# 即对应位置是否有字符存在，遇到不符合要求的地方直接返回false，全部遍历结束后返回true

class Solution(object):
    def validWordSquare(self, words):
        """
        :type words: List[str]
        :rtype: bool
        """
        for i in range(len(words)):
            for j in range(len(words[i])):
                if len(words) <= j or len(words[j]) <= i or words[i][j] != words[j][i]:
                    return False
        return True

class Solution(object):
    def validWordSquare(self, words):
        """
        :type words: List[str]
        :rtype: bool
        """
        m = len(words)
        n = len(words[0]) if m else 0
        if m != n:
            return False
        for x in range(m):
            n = len(words[x])
            c = 0
            for y in range(m):
                if len(words[y]) < x + 1:
                    break
                c += 1
            if c != n:
                return False
            for y in range(n):
                if words[x][y] != words[y][x]:
                    return False
        return True
