# Time:  O(logn), logn is the length of the number string
# Space: O(logn)

# Given a non-negative integer, you could swap two digits at most once
# to get the maximum valued number. Return the maximum valued number you could get.
# Input: 2736 Output: 7236
# Explanation: Swap the number 2 and the number 7.
# Input: 9973 Output: 9973
# Explanation: No swap.
# Note: The given number is in the range [0, 10^8]


# 思路: 由于我们希望置换后的数字最大，那么肯定最好的高位上的小数字和低位上的大数字进行置换，比如题目汇总的例子1。
# 而如果高位上的都是大数字，像例子2那样，很有可能就不需要置换。
# 所以我们需要找到每个数字右边的最大数字(包括其自身)，这样我们再从高位像低位遍历，如果某一位上的数字小于其右边的最大数字，说明需要调换，
# 由于最大数字可能不止出现一次，我们希望能跟较低位的数字置换，这样置换后的数字最大，
# 所以我们就从低位向高位遍历来找那个最大的数字，找到后进行调换即可。
# 比如对于1993这个数：
# 1 9 9 3
# 9 9 9 3  (back数组)
# 9 9 1 3
# 我们建立好back数组后，从头遍历原数字，发现1比9小，于是从末尾往前找9，找到后一置换，就得到了9913。

class Solution(object):
    def maximumSwap(self, num):
        """
        :type num: int
        :rtype: int
        """
        digits = list(str(num))
        left, right = 0, 0
        max_idx = len(digits)-1
        for i in reversed(xrange(len(digits))):
            if digits[i] > digits[max_idx]:
                max_idx = i
            elif digits[max_idx] > digits[i]:
                left, right = i, max_idx
        digits[left], digits[right] = digits[right], digits[left]
        return int("".join(digits))
