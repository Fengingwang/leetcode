
题目大意：
二维格子高度height，宽度width。其中包含一棵树tree，一个松鼠squirrel，以及一些坚果nuts。
求松鼠将所有坚果运送至树的位置所需的最小距离之和。
注意：
所有位置不会重叠
松鼠一次运送只能携带一枚坚果
给定坚果位置是无序的
高度和宽度是正整数，并且 3 <= height * width <= 10,000
给定位置包含至少一枚坚果，只有一棵树和一只松鼠

解题思路：
松鼠的行为可以分为两个步骤：
1）走到某个坚果i那里，然后把坚果i移动到树下；
2）依次走到其它坚果那里，带上坚果之后返回来。
所以松鼠的最短行程只取决于第一次选择哪个坚果，
这是因为选择坚果i之后，松鼠需要额外走从它当前位置到坚果i的距离，但是却可以省下从树到坚果i之间的距离，
所以我们的目标就是找到i，使得distance(squireel, nuts[i]) - distance(tree, nuts[i])最小。
确定i之后，再按照松鼠的移动轨迹计算路程即可。
求所有坚果到树的曼哈顿距离之和的2倍，记为total
求松鼠到坚果的曼哈顿距离 - 树到坚果曼哈顿距离的最小值， 该值与total之和即为最终答案

class Solution(object):
    def minDistance(self, height, width, tree, squirrel, nuts):
        """
        :type height: int
        :type width: int
        :type tree: List[int]
        :type squirrel: List[int]
        :type nuts: List[List[int]]
        :rtype: int
        """
        manhattan = lambda p, q: abs(p[0] - q[0]) + abs(p[1] - q[1])
        total = 2 * sum(manhattan(tree, nut) for nut in nuts)
        return total + min(manhattan(squirrel, nut) - manhattan(tree, nut) for nut in nuts)
