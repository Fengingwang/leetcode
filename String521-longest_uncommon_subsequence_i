# Time:  O(min(a, b))
# Space: O(1)
# Given a group of two strings, you need to find the longest uncommon subsequence of this group of two strings
# The longest uncommon subsequence is defined as the longest subsequence of one of these strings
# and this subsequence should not be any subsequence of the other strings
# A subsequence is a sequence that can be derived from one sequence
# by deleting some characters without changing the order of the remaining elements
# Trivially, any string is a subsequence of itself and an empty string is a subsequence of any string
# The input will be two strings, and the output needs to be the length of the longest uncommon subsequence
# If the longest uncommon subsequence does not exist, return -1.
# Input: "aba", "cdc"
# Output: 3
# Explanation: The longest uncommon subsequence is "aba" (or "cdc"),
# because "aba" is a subsequence of "aba", but not a subsequence of any other strings in the group of two strings
# 题意很重要啊！
# 解题方法: 题意简而言之就是求两个字符串的最长不常见子序列的长度。如果两个字符串相等，那么不存在！如果不等，长度最长的那个字符串就是最长不常见子序列

class Solution(object):
    def findLUSlength(self, a, b):
        """
        :type a: str
        :type b: str
        :rtype: int
        """
        if a == b:
            return -1
        return max(len(a), len(b))
