# Time:  O(logn)
# Space: O(1)
# You have a total of n coins that you want to form in a staircase shape,
# where every k-th row must have exactly k coins
# Given n, find the total number of full staircase rows that can be formed
# n is a non-negative integer and fits within the range of a 32-bit signed integer
# Example 1:
# n = 5
# The coins can form the following rows:
# ¤
# ¤ ¤
# ¤ ¤
# Because the 3rd row is incomplete, we return 2.
# n = 8
# The coins can form the following rows:
# ¤
# ¤ ¤
# ¤ ¤ ¤
# ¤ ¤
# Because the 4th row is incomplete, we return 3.

# 解题思想
# 这道题可以理解了为给了n个硬币，然后需要你按照这个规则： 第i层放i个硬币
# 那么，这n个硬币，能够完整的摆好多少层，比如说在第五层时只放了3个，那么完整的摆了4层，输出4
# 这道题直接用等差数列求和公式倒推就可以
# 数学推导: 假设完成K层，一共N个，由等差数列求和公式有： 等差数列前m项和
# 这里k是个浮点数，将其取为小于k的最大整数就可以 

# 解法I 解一元二次方程（初等数学）： x ^ 2 + x = 2 * n
# 解得： x = sqrt(2 * n + 1/4) - 1/2
class Solution(object):
    def arrangeCoins(self, n):
        """
        :type n: int
        :rtype: int
        """
        return int(math.sqrt(2 * n + 0.25) - 0.5)

# 解法II 二分枚举答案（Binary Search）：
class Solution(object):
    def arrangeCoins(self, n):
        """
        :type n: int
        :rtype: int
        """
        l, r = 0, n
        while l <= r:
            m = (l + r) / 2
            if m * (m + 1) / 2 > n:
                r = m - 1
            else:
                l = m + 1
        return r
