# Time:  O(1)
# Space: O(1)

# A Tic-Tac-Toe board is given as a string array board. Return True
# if and only if it is possible to reach this board position
# during the course of a valid tic-tac-toe game.
#
# The board is a 3 x 3 array, and consists of characters " ", "X", and "O".
# The " " character represents an empty square.
#
# Here are the rules of Tic-Tac-Toe:
# - Players take turns placing characters into empty squares (" ").
# - The first player always places "X" characters, while the second player always places "O" characters.
# - "X" and "O" characters are always placed into empty squares, never filled ones.
# - The game ends when there are 3 of the same (non-empty) character filling any row, column, or diagonal.
# - The game also ends if all squares are non-empty.
# - No more moves can be played if the game is over.
#
# Example 1:
# Input: board = ["O  ", "   ", "   "]
# Output: false
# Explanation: The first player always plays "X".
#
# Example 2:
# Input: board = ["XOX", " X ", "   "]
# Output: false
# Explanation: Players take turns making moves.
#
# Example 3:
# Input: board = ["XXX", "   ", "OOO"]
# Output: false
#
# Example 4:
# Input: board = ["XOX", "O O", "XOX"]
# Output: true
#
# Note:
# - board is a length-3 array of strings, where each string board[i] has length 3.
# - Each board[i][j] is a character in the set {" ", "X", "O"}.

# 中文描述 
# 在一个井字格游戏中，先手持有X的棋子，后手持有O的棋子，两者交替在井字格的空位中交替下子，
# 当任意一方使得斜着，竖着或是横着的三个位置为同一种棋子时，该人获胜，游戏结束。
# 或者双方都没有空格下子时，游戏结束。
# 现在给你一个井字格游戏的当前情况，问你在满足上述条件下，该情况是否成立。
# 题意： 检测当前局面是否为合法局面。
# 根据游戏的规则我们可以分析出来:
# x 的个数要等于o的个数 或者 x的个数比o的个数多1个。
# 不能同时出现3个x在一条线(行,列,对角线)和3个o在同一条线。
# 出现3个x在一条线, x的总个数必须等于o的总个数 + 1
# 出现3个o在一条线, x的总个数必须等于o的总个数
# 解题思路：
# 计算棋盘上'X'和'O'的个数，记为nx, no
# 分别判断'X'和'O'是否存在三子连珠，记为wx, wo
# 若wx为真，则nx == no + 1并且wo为假
# 若wo为真，则nx == no
# 否则，nx - 1 <= no <= nx

class Solution(object):
    def validTicTacToe(self, board):
        """
        :type board: List[str]
        :rtype: bool
        """
        nx = ''.join(board).count('X')
        no = ''.join(board).count('O')
        wx, wo = self.isWin(board, 'X'), self.isWin(board, 'O')
        if wx: return nx == no + 1 and not wo
        if wo: return nx == no
        return nx - 1 <= no <= nx

    def isWin(self, board, pc):
        if any(r == pc * 3 for r in board): return True
        if any(c == pc * 3 for c in zip(*board)): return True
        if board[0][0] == board[1][1] == board[2][2] == pc: return True
        if board[0][2] == board[1][1] == board[2][0] == pc: return True
        return False
