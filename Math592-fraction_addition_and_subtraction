# Time:  O(nlogx), x is the max denominator
# Space: O(n)
# Given a string representing an expression of fraction addition and subtraction,
# you need to return the calculation result in string format.
# The final result should be irreducible fraction. If your final result is an integer, say 2,
# you need to change it to the format of fraction that has denominator 1.
# So in this case, 2 should be converted to 2/1.
# Input:"-1/2+1/2"     Output: "0/1"
# Input:"-1/2+1/2+1/3" Output: "1/3"
# Input:"1/3-1/2"      Output: "-1/6"
# Input:"5/3+1/3"      Output: "2/1"
# Note:
# The input string only contains '0' to '9', '/', '+' and '-'. So does the output.
# Each fraction (input and output) has format ±numerator/denominator.
# If the first input fraction or the output is positive, then '+' will be omitted.
# The input only contains valid irreducible fractions,
# where the numerator and denominator of each fraction will
# always be in the range [1,10]. If the denominator is 1,
# it means this fraction is actually an integer in a fraction format defined above.
# The number of given fractions will be in the range [1,10].
# The numerator and denominator of the final result are guaranteed to be valid and in the range of 32-bit int.

题目大意： 求分数加减法算式的值，结果化为最简分数。
注意：
输入字符串只包含0~9，+-/。输出亦然
每个分数之前包含±号，若第一个分数为正数，省去+
输入只包含有效的最简分数，分子分母范围[1, 10]。若分母为1，表示该分数实际上是一个整数。
分数的个数范围[1, 10]
分子分母的结果在32位带符号整数范围之内

解题方法: 分数的加减法
分式的减法法则是:
同分母分式相加减，只把分子相加减，分母不变；
异分母分式相加减，先通分变为同分母分式，再按同分母分式相加减的法则运算；
完成分式的加减运算后，若所得分式不是既约分式应约分化为既约分式。
思路：
求分母的最小公倍数，记为LO
将分子乘以 LO / 分母
对分子求和，记为HI
求LO和HI的最大公约数的绝对值，记为GCD
结果的分子分母分别为HI / GCD, LO / GCD

class Solution(object):
    def fractionAddition(self, expression):
        """
        :type expression: str
        :rtype: str
        """
        def gcd(a, b):
            if a < b: a, b = b, a
            while b:
                a, b = b, a % b
            return a

        def lcm(a, b):
            return a * b / gcd(a, b)

        part = ''
        fractions = []
        for c in expression:
            if c in '+-':
                if part: fractions.append(part)
                part = ''
            part += c
        if part: fractions.append(part)

        hi = [int(e.split('/')[0]) for e in fractions]
        lo = [int(e.split('/')[1]) for e in fractions]
        
        LO = reduce(lcm, lo)
        HI = sum(h * LO / l for h, l in zip(hi, lo))
        GCD = abs(gcd(LO, HI))

        return '%s/%s' % (HI / GCD, LO / GCD)

import re
class Solution(object):
    def fractionAddition(self, expression):
        """
        :type expression: str
        :rtype: str
        """
        def gcd(a, b):
            while b:
                a, b = b, a%b
            return a
        ints = map(int, re.findall('[+-]?\d+', expression))
        A, B = 0, 1
        for i in xrange(0, len(ints), 2):
            a, b = ints[i], ints[i+1]
            A = A * b + a * B
            B *= b
            g = gcd(A, B)
            A //= g
            B //= g
        return '%d/%d' % (A, B)
