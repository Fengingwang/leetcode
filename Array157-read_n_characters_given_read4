# Time:  O(n)
# Space: O(1)
# The API: int read4(char *buf) reads 4 characters at a time from a file
# The return value is the actual number of characters read 
# For example, it returns 3 if there is only 3 characters left in the file
# By using the read4 API, implement the function int read(char *buf, int n) that reads n characters from the file
# Note:
# The read function will only be called once for each test case

# The read4 API is already defined for you
# @param buf, a list of characters
# @return an integer
def read4(buf):
    global file_content
    i = 0
    while i < len(file_content) and i < 4:
        buf[i] = file_content[i]
        i += 1
    if len(file_content) > 4:
        file_content = file_content[4:]
    else:
        file_content = ""
    return i

# 题解：
# 这道题给了我们一个Read4函数，每次可以从一个文件中最多读出4个字符，如果文件中的字符不足4个字符时，返回准确的当前剩余的字符数。
# 现在让我们实现一个最多能读取n个字符的函数。
# 这题有迭代和递归的两种解法，我们先来看迭代的方法，
# 思路是我们每4个读一次，然后把读出的结果判断一下，
# 如果为0的话，说明此时的buf已经被读完，跳出循环，直接返回res和n之中的较小值。
# 否则一直读入，直到读完n个字符，循环结束，最后再返回res和n之中的较小值
# Python的时候注意temp = [""] * 4是装字符的list，而不是[]。

class Solution(object):
    def read(self, buf, n):
        """
        :type buf: Destination buffer (List[str])
        :type n: Maximum number of characters to read (int)
        :rtype: The number of characters read (int)
        """
        read_bytes = 0
        buffer = [''] * 4
        for i in xrange(n / 4 + 1):
            size = read4(buffer)
            if size:
                buf[read_bytes:read_bytes+size] = buffer
                read_bytes += size
            else:
                break
        return min(read_bytes, n)
