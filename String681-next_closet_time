# Time:  O(1)
# Space: O(1)

# Given a time represented in the format "HH:MM",
# form the next closest time by reusing the current digits.
# There is no limit on how many times a digit can be reused.
# You may assume the given input string is always valid.
# For example, "01:34", "12:09" are all valid. "1:34", "12:9" are all invalid.
#
# Example 1:
# Input: "19:34"
# Output: "19:39"
# Explanation: The next closest time choosing from digits 1, 9, 3, 4, is 19:39, which occurs 5 minutes later.
# It is not 19:33, because this occurs 23 hours and 59 minutes later.
#
# Example 2:
# Input: "23:59"
# Output: "22:22"
# Explanation: The next closest time choosing from digits 2, 3, 5, 9, is 22:22.
# It may be assumed that the returned time is next day time since it is smaller than the input time numerically.

这道题给了我们一个时间点，让我们求最近的下一个时间点，规定了不能产生新的数字，当下个时间点超过零点时，就当第二天的时间。
为了找到下一个时间点，我们肯定是从分钟开始换数字，而且换的数字要是存在的数字，那么我们最先要做的就是统计当前时间点中的数字，去除重复数字排序。
下面就从低位分钟开始换数字了，
如果低位分钟上的数字已经是最大的数字了，那么说明要转过一轮了，就要把低位分钟上的数字换成最小的那个数字；
否则就将低位分钟上的数字换成下一个数字。
然后再看高位分钟上的数字，
同理，如果高位分钟上的数字已经是最大的数字，或则下一个数字大于5，那么直接换成最小值；
否则就将高位分钟上的数字换成下一个数字。
对于小时位上的数字也是同理，对于小时低位上的数字情况比较复杂，
当小时高位不为2的时候，低位可以是任意数字，而当高位为2时，低位需要小于等于3。
对于小时高位，其必须要小于等于2

下面这种方法的写法比较简洁，实际上用了暴力搜索，
由于按分钟算的话，一天只有1440分钟，也就是1440个时间点，
我们可以从当前时间点开始，遍历一天的时间，也就是接下来的1440个时间点，
得到一个新的整型时间点后，我们按位来更新结果res，对于每个更新的数字字符，看其是否在原时间点字符中存在，
如果不存在，直接break，然后开始遍历下一个时间点，
如果四个数字都成功存在了，那么将当前时间点中间夹上冒号返回即可

class Solution(object):
    def nextClosestTime(self, time):
        """
        :type time: str
        :rtype: str
        """
        h, m = time.split(":")
        curr = int(h) * 60 + int(m)
        result = None
        for i in xrange(curr+1, curr+1441):
            t = i % 1440
            h, m = t // 60, t % 60
            result = "%02d:%02d" % (h, m)
            if set(result) <= set(time):
                break
        return result
