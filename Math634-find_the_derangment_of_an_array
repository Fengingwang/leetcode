In combinatorial mathematics, a derangement is a permutation of the elements of a set, 
such that no element appears in its original position.
There is originally an array consisting of n integers from 1 to n in ascending order, 
you need to find the number of derangement it can generate.
Also, since the answer may be very large, you should return the output mod 109 + 7.
Example 1:
Input: 3 Output: 2
Explanation: The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].
Note:
n is in the range of [1, 106].

题目大意：
在组合数学中，错位排列是指所有元素均不在其原始位置的排列。
给定[1, 2 , ... , n]，求其错位排列的个数。
由于结果可能很大，结果对10^9 + 7取模

思路： 组合数学中的错排问题。
当n个编号元素放在n个编号位置，元素编号与位置编号各不对应的方法数用D(n)表示，
那么D(n-1)就表示n-1个编号元素放在n-1个编号位置，各不对应的方法数，其它类推。
推导方法如下：
1）把第n个元素放在某一个位置，比如位置k，那么一共有(n-1)中放法。
2）放编号为k的元素，此时有两种情况：
  a）把k放到位置n，那么对于剩下的n-2个元素，就一共有D(n-2)种放法；
  b）第k个元素不放在位置n，这时k连同其余的n-2个元素都各有一个位置不能放，所以有D(n-1)种放法。
因此，D(n) = (n - 1) (D(n - 2) + D(n - 1))，特别地，有D(1) = 0, D(2) = 1。

错位排列可以理解成将标号为1~n的帽子分配给标号为1~n的人，每个人拿到的帽子标号都与其自身的标号不同。
假设第一个人选取了标号为i的帽子，此时可分两种情况讨论：
1. 第i个人选择第一顶帽子，则问题规模缩小为n - 2
2, 3, 4, ..., i-1, i+1, ... n 人
2, 3, 4, ..., i-1, i+1, ... n 帽
2. 第i个人不选第一顶帽子，则问题规模缩小为n - 1（相当于第i个人不能选择第1顶帽子）
2, 3, 4, ..., i-1, i, i+1, ..., n 人
2, 3, 4, ..., i-1, 1, i+1, ..., n 帽

class Solution(object):
    def findDerangement(self, n):
        """
        :type n: int
        :rtype: int
        """
        dp = [0, 1]
        for x in range(2, n + 1):
            dp.append(x * (dp[- 1] + dp[-2]) % (10**9 + 7))
        return dp[n - 1]
