# Time:  O(n)
# Space: O(1)
# Merge two sorted linked lists and return it as a new list
# The new list should be made by splicing together the nodes of the first two lists

# 将两个有序链表合并，返回新的链表。新链表应该是两个旧链表剪接得到的。
# 思路一
# 合并后的链表仍然是有序的，可以同时遍历两个链表，每次选取两个链表中较小值的节点，依次连接起来，就能得到最终的链表。

# Definition for singly-linked list
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None  #the pointer initially points to nothing

class Solution(object):
    def mergeTwoLists(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        if not l1 or not l2:
            return l1 or l2
        head = cur = ListNode(0)
        while l1 and l2:
            if l1.val < l2.val:
                cur.next = l1
                l1 = l1.next
            else:
                cur.next = l2
                l2 = l2.next
            cur = cur.next
        cur.next = l1 or l2
        return head.next


http://stackabuse.com/python-linked-lists/
# basic idea about linked list 
