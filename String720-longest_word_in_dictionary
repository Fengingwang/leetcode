# Time:  O(n), n is the total sum of the lengths of words
# Space: O(t), t is the number of nodes in trie
# Given a list of strings words representing an English Dictionary,
# find the longest word in words that can be built one character at a time by other words in words
# If there is more than one possible answer, return the longest word with the smallest lexicographical order
# If there is no answer, return the empty string
# Input: words = ["w","wo","wor","worl", "world"]
# Output: "world"
# The word "world" can be built one character at a time by "w", "wo", "wor", and "worl".
# Input: words = ["a", "banana", "app", "appl", "ap", "apply", "apple"]
# Output: "apple"
# Both "apply" and "apple" can be built from other words in the dictionary
# However, "apple" is lexicographically smaller than "apply"
# Note:
# - All the strings in the input will only contain lowercase letters
# - The length of words will be in the range [1, 1000].
# - The length of words[i] will be in the range [1, 30].

# 方法一：
# 巧妙用了set（）,判断每个单词的除去倒数第一个字母是否在set里，用一个变量保存最长的单词。Sorting is a key here
# 用判断新单词是否比最长单词更长的方式完成两个需求：1.找出最长；2.同样最长的情况下，保留字母序最小的。这样做的前提是先对words进行排序。
class Solution(object):
    def longestWord(self, words):
        """
        :type words: List[str]
        :rtype: str
        """
        words.sort()
        res = set([''])
        longestWord = ''
        for word in words:
            if word[:-1] in res:
                res.add(word)
                if len(word) > len(longestWord):
                    longestWord = word
        return longestWord


