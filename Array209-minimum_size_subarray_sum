# Given an array of n positive integers and a positive integer s,
# find the minimal length of a subarray of which the sum ≥ s 
# If there is not one, return 0 instead
# For example, given the array [2,3,1,2,4,3] and s = 7,
# the subarray [4,3] has the minimal length under the problem constraint
# More practice:
# If you have figured out the O(n) solution, try coding another solution of which the time complexity is O(n log n)

# 解题思路：
# O(n)解法：滑动窗口法
# 滑动窗口 [left, right] 初始大小为0，滑动的规则如下：
# 若元素之和 < s，窗口右边沿向右延伸，直到 元素之和≥s 为止。
# 若元素之和 ≥ s，更新最小长度。然后窗口左边沿右移一位（即移除窗口中第一个元素），重复第1步。
# 我们需要定义两个指针left和right，分别记录子数组的左右的边界位置，
# 然后我们让right向右移，直到子数组和大于等于给定值或者right达到数组末尾，此时我们更新最短距离，
# 并且将left像右移一位，然后再sum中减去移去的值，然后重复上面的步骤，直到right到达末尾，
# 且left到达临界位置，即要么到达边界，要么再往右移动，和就会小于给定值。

class Solution:
    def minSubArrayLen(self, s, nums):
        size = len(nums)
        start, end, sum = 0, 0, 0
        bestAns = size + 1
        while end < size:
            while end < size and sum < s:
                sum += nums[end]
                end += 1
            while start < end and sum >= s:
                bestAns = min(bestAns, end - start)
                sum -= nums[start]
                start += 1
        return [0, bestAns][bestAns <= size]

    def minSubArrayLen(self, s, nums):
        size = len(nums)
        start, end, sum = 0, 0, 0
        bestAns = size + 1
        while True:
            if sum < s:
                if end >= size:
                    break
                sum += nums[end]
                end += 1
            else:
                if start > end:
                    break
                bestAns = min(end - start, bestAns)
                sum -= nums[start]
                start += 1
        return [0, bestAns][bestAns <= size]

# It must be a good solution but I do not understand anyway
# O(nlogn)解法：二分枚举答案，每次判断的时间复杂度为O(n) 
# 思路是，我们建立一个比原数组长一位的sums数组，其中sums[i]表示nums数组中[0, i - 1]的和，
# 然后我们对于sums中每一个值sums[i]，用二分查找法找到子数组的右边界位置，使该子数组之和大于sums[i] + s，
# 然后我们更新最短长度的距离即可。
class Solution:
    def minSubArrayLen(self, s, nums):
        size = len(nums)
        left, right = 0, size
        bestAns = 0
        while left <= right:
            mid = (left + right) / 2
            if self.solve(mid, s, nums):
                bestAns = mid
                right = mid - 1
            else:
                left = mid + 1
        return bestAns

    def solve(self, l, s, nums):
        sums = 0
        for x in range(len(nums)):
            sums += nums[x]
            if x >= l:
                sums -= nums[x - l]
            if sums >= s:
                return True
        return False
