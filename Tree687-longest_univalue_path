# Time:  O(n)
# Space: O(h)
# Given a binary tree, find the length of the longest path
# where each node in the path has the same value, This path may or may not pass through the root
# Note: The length of path between two nodes is represented by the number of edges between them.
# Input:
#               5
#              / \
#             4   5
#            / \   \
#           1   1   5
# Output: 2
# Input:
#               1
#              / \
#             4   5
#            / \   \
#           4   4   5
# Output: 2
# Note: The given binary tree has not more than 10000 nodes, The height of the tree is not more than 1000
# 题目大意： 给定二叉树，求节点值全部相等的最长路径。路径不一定要通过树根。
# 方法一： 基本思想就是dfs，求一个顶点到所有根节点的路径，时刻保留相等元素的最大值。相等元素的最大值是左右子树的相等元素的最大值+1，所以是递归。

# Definition for a binary tree node
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def longestUnivaluePath(self, root):
        """
        :type root: TreeNode
        :rtype: int
        """
        longest = [0]
        def dfs(root):
            if not root: return 0
            left_len, right_len = dfs(root.left), dfs(root.right)
            left = left_len + 1 if root.left and root.left.val == root.val else 0
            right = right_len + 1 if root.right and root.right.val == root.val else 0
            longest[0] = max(longest[0], left + right)
            return max(left, right)
        dfs(root)
        return longest[0]
