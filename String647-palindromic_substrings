# Time:  O(n)
# Space: O(n)

# Given a string, your task is to count how many palindromic substrings in this string.
# The substrings with different start indexes or end indexes are counted as
# different substrings even they consist of same characters.
#
# Input: "abc" Output: 3
# Explanation: Three palindromic strings: "a", "b", "c".
# Input: "aaa" Output: 6
# Explanation: Six palindromic strings: "a", "a", "a", "aa", "aa", "aaa".
# Note:
# The input string length will not exceed 1000.


这个回文字符串的题母，千篇一律啊。
在5. Longest Palindromic Substring中，当遇到回文字符串时，我们是使用maxL记录下来最长的那个。
稍微修改，这个题我们只要做统计个数就可以。因此代码基本一样。
class Solution(object):
    def countSubstrings(self, s):
        """
        :type s: str
        :rtype: int
        """
        n = len(s)
        count = 0
        start, end, maxL = 0, 0, 0
        dp = [[0] * n for _ in range(n)]
        for i in range(n):
            for j in range(i):
                dp[j][i] = (s[j] == s[i]) & ((i - j < 2) | dp[j + 1][i - 1])
                if dp[j][i]:
                    count += 1
            dp[i][i] = 1
            count += 1
        return count

We perform a "center expansion" among all possible centers of the palindrome.
Let N = len(S). There are 2N-1 possible centers for the palindrome:
we could have a center at S[0], between S[0] and S[1], at S[1], between S[1] and S[2], at S[2], etc.
To iterate over each of the 2N-1 centers, we will move the left pointer every 2 times, 
and the right pointer every 2 times starting with the second (index 1). 
Hence, left = center / 2, right = center / 2 + center % 2.
From here, finding every palindrome starting with that center is straightforward: 
while the ends are valid and have equal characters, record the answer and expand.

def countSubstrings(self, S):
    N = len(S)
    ans = 0
    for center in xrange(2*N - 1):
        left = center / 2
        right = left + center % 2
        while left >= 0 and right < N and S[left] == S[right]:
            ans += 1
            left -= 1
            right += 1
    return ans

Bonus: Implementing Manacher algorithm can give a linear time solution with one additional line. 
I invite the reader to Google "Manacher's Algorithm" if interested in the explanation.

def countSubstrings(self, S):
    def manachers(S):
        A = '@#' + '#'.join(S) + '#$'
        Z = [0] * len(A)
        center = right = 0
        for i in xrange(1, len(A) - 1):
            if i < right:
                Z[i] = min(right - i, Z[2 * center - i])
            while A[i + Z[i] + 1] == A[i - Z[i] - 1]:
                Z[i] += 1
            if i + Z[i] > right:
                center, right = i, i + Z[i]
        return Z

    return sum((v+1)/2 for v in manachers(S))
