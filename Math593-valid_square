# Time:  O(1)
# Space: O(1)
# Given the coordinates of four points in 2D space,
# return whether the four points could construct a square.
# The coordinate (x,y) of a point is represented by an integer array with two integers.
# Example:
# Input: p1 = [0,0], p2 = [1,1], p3 = [1,0], p4 = [0,1]
# Output: True
# Note:
# All the input integers are in the range [-10000, 10000].
# A valid square has four equal sides with positive length
# and four equal angles (90-degree angles).
# Input points have no order.

题目大意： 给定平面上的4个点，判断是否围成一个正方形。
注意：
坐标的范围[-10000, 10000]
有效的正方形有4条相等的长度为正数的边，并且四个内角为直角。
输入点无序

解题思路：
刚开始考虑的方法是想判断四个角是否是直角，
但即便四个角都是直角，也不能说明一定就是正方形，还有可能是矩形。还得判断各边是否相等。
其实我们可以仅通过边的关系的来判断是否是正方形，根据几何的知识正方形的四条边相等，两条对角线相等，
满足这两个条件的四边形一定是正方形。
那么这样就好办了，我们只需要对四个点，两两之间算距离，
如果计算出某两个点之间距离为0，说明两点重合了，直接返回false，
如果不为0，那么我们就建立距离和其出现次数之间的映射，
最后如果我们只得到了两个不同的距离长度，那么就说明是正方形了

class Solution(object):
    def validSquare(self, p1, p2, p3, p4):
        """
        :type p1: List[int]
        :type p2: List[int]
        :type p3: List[int]
        :type p4: List[int]
        :rtype: bool
        """
        def dist(p1, p2):
            return (p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2
        lookup = set([dist(p1, p2), dist(p1, p3),\
                      dist(p1, p4), dist(p2, p3),\
                      dist(p2, p4), dist(p3, p4)])
        return 0 not in lookup and len(lookup) == 2
