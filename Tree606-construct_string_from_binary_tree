# Time:  O(n)
# Space: O(h)
# You need to construct a string consists of parenthesis and integers from a binary tree with
# the preorder traversing way
# The null node needs to be represented by empty parenthesis pair "()".
# And you need to omit all the empty parenthesis pairs that do not affect
# the one-to-one mapping relationship between the string and the original binary tree
# Example 1:
# Input: Binary tree: [1,2,3,4]
#        1
#      /   \
#     2     3
#    /
#   4
# Output: "1(2(4))(3)"
# Explanation: Originallay it needs to be "1(2(4)())(3()())",
# but you need to omit all the unnecessary empty parenthesis pairs and it will be "1(2(4))(3)"
# Example 2:
# Input: Binary tree: [1,2,3,null,4]
#        1
#      /   \
#     2     3
#      \
#       4
# Output: "1(2()(4))(3)"
# Explanation: we cannot omit the first parenthesis pair to break the one-to-one mapping relationship
# between the input and the output
# 题目大意： 将二叉树序列化为字符串，形式为"root(left)(right)"，空节点表示为"()"。所有不产生歧义的空括号可以省去。
# 方法: 用递归的方法前序遍历，在遍历节点前加入(，遍历节点后加入)即可。
#      如果左右子节点为空，则不需要其子节点的()。
#      如果只有右子节点，则左子节点需要用()代替，以区分只有左子节点而无右子节点的情况

# Definition for a binary tree node
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution(object):
    def tree2str(self, t):
        """
        :type t: TreeNode
        :rtype: str
        """
        if not t: return ''
        ans = str(t.val)
        if t.left or t.right: ans += '(' + self.tree2str(t.left) + ')'
        if t.right: ans += '(' + self.tree2str(t.right) + ')'
        return ans
