# Time:  O(k + n)
# Space: O(1)
# Assume you have an array of length n initialized with all 0 and are given k update operations
# Each operation is represented as a triplet: [startIndex, endIndex, inc] 
# which increments each element of subarray A[startIndex ... endIndex] 
# (startIndex and endIndex inclusive) with inc.
# Return the modified array after all k operations were executed
# Given:
#     length = 5,
#     updates = [
#         [1,  3,  2],
#         [2,  4,  3],
#         [0,  2, -2]
#     ]
# Output: [-2, 0, 3, 5, 3]
# Explanation:
# Initial state:                       [ 0, 0, 0, 0, 0 ]
# After applying operation [1, 3, 2]:  [ 0, 2, 2, 2, 0 ]
# After applying operation [2, 4, 3]:  [ 0, 2, 5, 5, 3 ]
# After applying operation [0, 2, -2]: [-2, 0, 3, 5, 3 ]
# Hint:
# Thinking of using advanced data structures? You are thinking it too complicated.
# For each update operation, do you really need to update all elements between i and j?
# Update only the first and end element is sufficient.
# The optimal time complexity is O(k + n) and uses O(1) extra space.

# 这道题的提示说了我们肯定不能把范围内的所有数字都更新，而是只更新开头结尾两个数字就行
# 那么我们的做法就是在开头坐标startIndex位置加上inc，而在结束位置加1的地方加上-inc
# 那么根据题目中的例子，我们可以得到一个数组，nums = {-2, 2, 3, 2, -2, -3}
# 然后我们发现对其做累加和就是我们要求的结果result = {-2, 0, 3, 5, 3}

class Solution(object):
    def getModifiedArray(self, length, updates):
        """
        :type length: int
        :type updates: List[List[int]]
        :rtype: List[int]
        """
        result = [0] * length
        for update in updates:
            result[update[0]] += update[2]
            if update[1]+1 < length:
                result[update[1]+1] -= update[2]
        for i in xrange(1, length):
            result[i] += result[i-1]
        return result

# 解法：
# 这题与算法无关，是个数学题。思想是把所有需要相加的值存在第一个数，然后把这个范围的最后一位的下一位减去这个inc
# 这样我所以这个范围在求最终值的时候，都可以加上这个inc，而后面的数就不会加上inc。
