# Time:  O(m * n), m is the number of nodes of s, n is the number of nodes of t
# Space: O(h), h is the height of s
# Given two non-empty binary trees s and t,
# check whether tree t has exactly the same structure and node values with a subtree of s
# A subtree of s is a tree consists of a node in s and all of this node descendants
# The tree s could also be considered as a subtree of itself
# Given tree s:
 #      3
#     / \
#    4   5
#   / \
#  1   2
# Given tree t:
#    4
#   / \
#  1   2
# Return true, because t has the same structure and node values with a subtree of s
# Given tree s:
#      3
#     / \
#    4   5
#   / \
#  1   2
#     /
#   0
# Given tree t:
#    4
#   / \
#  1   2
# Return false

# Definition for a binary tree node
# class TreeNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

# 方法一：445ms
class Solution(object):
    def check(self, s, t):
        if s is None or t is None:
            return s is None and t is None
        if s.val != t.val:
            return False
        return self.check(s.left, t.left) and self.check(s.right, t.right)
    def isSubtree(self, s, t):
        """
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """
        if s is None or t is None:
            return s is None and t is None
        if self.check(s, t):
            return True
        return self.isSubtree(s.left, t) or self.isSubtree(s.right, t)

# 方法二：156ms
class Solution(object):
    def isSubtree(self, s, t):
        """
        :type s: TreeNode
        :type t: TreeNode
        :rtype: bool
        """

        def preorder(node):
            if not node:
                return "$"
            return "^" + str(node.val) + "#" + preorder(node.left) + preorder(node.right)
        print preorder(s)
        print preorder(t)
        return preorder(t) in preorder(s)
