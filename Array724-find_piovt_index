# Time:  O(n)
# Space: O(1)
# Given an array of integers nums, write a method that returns the "pivot" index of this array
# We define the pivot index as the index where the sum of the numbers to
# the left of the index is equal to the sum of the numbers to the right of the index
# If no such index exists, return -1. If there are multiple pivot indexes, return left-most pivot index
# Input: nums = [1, 7, 3, 6, 5, 6] Output: 3
# The sum of the numbers to the left of index 3 (nums[3] = 6) is equal to the sum of numbers to the right of index 3.
# Also, 3 is the first index where this occurs
# Input: nums = [1, 2, 3] Output: -1
# There is no index that satisfies the conditions in the problem statement.
# 思路： 当然最先考虑的是依次从左往右遍历，遇见第一个中间数（左边数的和=右边数的和）直接返回就可以
# if 将左右相加 directly，当数组很长的时候，明显效率不高，每一个都要加2遍，借鉴了讨论区的思路，那就直接加一次留下面用，然后直接除2，等于左边就可以返回了
class Solution:
    def pivotIndex(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        add_num=sum(nums)
        left_sum=0
        for i in range(0,len(nums)):
            add_num-=nums[i]
            if add_num==left_sum:
                return i
            else:
                left_sum+=nums[i]
        else:
            return -1

class Solution(object):
    def pivotIndex(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        total = sum(nums)
        left_sum = 0
        for i, num in enumerate(nums):
            if left_sum == (total-left_sum-num):
                return i
            left_sum += num
        return -1
