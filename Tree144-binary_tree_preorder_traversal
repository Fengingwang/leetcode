# Time:  O(n)
# Space: O(1)
# Given a binary tree, return the preorder traversal of its nodes values
# For example:
# Given binary tree {1,#,2,3},
#    1
#     \
#      2
#     /
#    3
# return [1,2,3].
# Note: Recursive solution is trivial, could you do it iteratively?

原题: 采用非递归的方法进行二叉树的前序遍历。
解题思路
二叉树进行前序遍历时，首先访问根结点然后遍历左子树，最后遍历右子树。
在遍历左、右子树时，仍然先访问根结点，然后遍历左子树，最后遍历右子树。
可以看出采用递归的方法非常简单，如果不用递归，我们可以通过一个栈来辅助遍历。
在先序遍历中，访问完根节点，我们接着遍历它的左子树，它的右子树要等左子树遍历完成后再遍历，所以我们先把它存起来。
而左子树的头节点（区别于根节点）也会有它的右子树，这棵右子树需要比之前的右子树先遍历（因为它是根节点的左子树中的），所以存储采用栈的结构。
当遍历到某一个节点没有左子树后，我们从栈中取出右子树节点继续遍历，直到遍历完整棵树。

# Definition for a  binary tree node
class TreeNode(object):
    def __init__(self, x):
        self.val = x
        self.left = None
        self.right = None

class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        stack = []
        result = []
        while root or stack:
            if not root:
                root = stack.pop()
            result.append(root.val)
            if root.right:
                stack.append(root.right)
            root = root.left
        return result

# Morris Traversal Solution
class Solution(object):
    def preorderTraversal(self, root):
        """
        :type root: TreeNode
        :rtype: List[int]
        """
        result, curr = [], root
        while curr:
            if curr.left is None:
                result.append(curr.val)
                curr = curr.right
            else:
                node = curr.left
                while node.right and node.right != curr:
                    node = node.right

                if node.right is None:
                    result.append(curr.val)
                    node.right = curr
                    curr = curr.left
                else:
                    node.right = None
                    curr = curr.right
        return result

