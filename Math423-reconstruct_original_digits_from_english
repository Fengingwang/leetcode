# Time:  O(n)
# Space: O(1)
# Given a non-empty string containing an out-of-order English representation
# of digits 0-9, output the digits in ascending order.
# Note:
# Input contains only lowercase English letters.
# Input is guaranteed to be valid and can be transformed to its original digits.
# That means invalid inputs such as "abc" or "zerone" are not permitted.
# Input length is less than 50,000.
# Example 1:
# Input: "owoztneoer"
# Output: "012"
# Example 2:
# Input: "fviefuro"
# Output: "45"

题目大意： 
给定一个非空字符串，包含一组乱序的英文字母表示的数字0-9，按递增序(count)输出这些数字。
这道题是让我们给了我们一个字符串，字符串里全都是用英文写的数字，但是字母顺序是打乱的
现在我们需要还原出来其真正的数字，字符串肯定是合法的
解题的核心在于，0~9对应的英文字母，有那么些规律，可以从中找到相关的规律。
我们可以发现有些的单词的字符是独一无二的，
比如z，只出现在zero中，还有w，u，x，g这四个单词，分别只出现在two，four，six，eight中，那么这五个数字的个数就可以被确定了，
由于含有o的单词有zero，two，four，one，其中前三个都被确定了，那么one的个数也就知道了；
由于含有h的单词有eight，three，其中eight个数已知，那么three的个数就知道了；
由于含有f的单词有four，five，其中four个数已知，那么five的个数就知道了；
由于含有s的单词有six，seven，其中six个数已知，那么seven的个数就知道了；
由于含有i的单词有six，eight，five，nine，其中前三个都被确定了，那么nine的个数就知道了，
知道了这些问题就变的容易多了，
我们按顺序"zero", "two", "four", "six", "eight", "one", "three", "five", "seven", "nine"
就能找出所有的个数了

from collections import Counter
class Solution(object):
    def originalDigits(self, s):
        """
        :type s: str
        :rtype: str
        """
        cnts = collections.Counter(s)
        nums = ['six', 'zero', 'two', 'eight', 'seven', 'four', 'five', 'nine', 'one', 'three']
        numc = [collections.Counter(num) for num in nums]
        digits = [6, 0, 2, 8, 7, 4, 5, 9, 1, 3]
        ans = [0] * 10
        for idx, num in enumerate(nums):
            cntn = numc[idx]
            t = min(cnts[c] / cntn[c] for c in cntn)
            ans[digits[idx]] = t
            for c in cntn:
                cnts[c] -= t * cntn[c]
        return ''.join(str(i) * n for i, n in enumerate(ans))

class Solution(object):
    def originalDigits(self, s):
        """
        :type s: str
        :rtype: str
        """
        # The count of each char in each number string.
        cnts = [Counter(_) for _ in ["zero", "one", "two", "three", \
                                     "four", "five", "six", "seven", \
                                     "eight", "nine"]]
        # The order for greedy method.
        order = [0, 2, 4, 6, 8, 1, 3, 5, 7, 9]
        # The unique char in the order.
        unique_chars = ['z', 'o', 'w', 't', 'u', \
                        'f', 'x', 's', 'g', 'n']
        cnt = Counter(list(s))
        res = []
        for i in order:
            while cnt[unique_chars[i]] > 0:
                cnt -= cnts[i]
                res.append(i)
        res.sort()
        return "".join(map(str, res))
