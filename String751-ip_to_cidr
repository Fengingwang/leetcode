# Time:  O(n)
# Space: O(1)

看了半天，读不懂题目的意思？？？尼克杨问号脸？？？
IP to CIDR 将IP地址转为CIDR无类别域间路由
此题给了我们一个用字符串表示的ip地址，还有一个整数n，让我们以给定的ip地址为起点，需要覆盖n个ip地址。
而这n个ip地址的写法使用无类别域间路由CIDR块来写，
所谓的CIDR块，是由一个正常的ip地址，加上斜杠数字，斜杠后面的数字表示这些ip地址具有相同的前缀的个数，
Input: ip = "255.0.0.7", n = 10  
Output: ["255.0.0.7/32","255.0.0.8/29","255.0.0.16/32"]  
//255.0.0.7/32表示1个IP地址  
//255.0.0.8/29表示8个IP地址  
//255.0.0.16/32表示1个IP地址  
比如"255.0.0.7/32"，如果有32个相同的前缀，说明只有唯一的一个ip地址，因为IPv4总共就只有32位。
再比如"255.0.0.8/29"，表示有29个相同的前缀，那么最后3位可以自由发挥，2的3次方为8，所以就共有8个ip地址。
同理，"255.0.0.16/32"只表示一个地址，那么这三个CIDR块总共覆盖了10个地址，就是我们要求的结果。
由于题目中要求尽可能少的使用CIDR块，那么在n确定的情况下，CIDR块能覆盖的越多越好。
根据我们前面的分析，当CIDR块斜杠后面的数字越小，该块覆盖的ip地址越多。那么就是说相同前缀的个数越少越好，
但是我们的ip地址又不能小于给定的ip地址，所以我们只能将0变为1，而不能将1变为0。
所以我们的选择就是有将最低位1后面的0进行变换，比如"255.0.0.8"末尾有3个0，可以变换出8个不同的地址。
那么我们只要找出末尾1的位置，就知道能覆盖多少个地址了。
找末尾1有个trick，就是利用 x & -x 来快速找到，这个trick在之前做的题中也有应用。
知道了最多能覆盖地址的数量，还要考虑到n的大小，不能超过n，因为题目只要求覆盖n个。
确定了覆盖的个数，我们就可以进行生成CIDR块的操作了，
之前我们为了求 x & -x，将ip地址转为了一个十进制的数，
现在我们要把每一块拆分出来，直接按对应位数量进行右移并与上255即可，斜杠后的数字计算通过覆盖的个数进行log2运算，再被32减去即可

思路： 
题解很取巧，简单说说思路，给定初始的IP之后，转换成2进制的形式，
接着每次都找二进制串中的最低位1，它表示的就是CIDR的长度。
比如00011000，最低位为00001000，因为在while循环结构内，00011000一定保证在范围内，所以可以认为从00011000开始的step范围内，都是CIDR的某一种解。
这样一来，我们只需要把00001000转为IP即可，接着让00011000＋00001000，继续求解。

有一些建议： 
做本题需要一些IP地址的知识，还要理解 16 行的x&-x 操作的含义。
C语言中 x & -x 表示什么意思？ 
应该是取出x中最低为1的那一位，例如
2：二进制为0000 0010，最低为1的那一位是第2位，所以取出后为0000 0010
3：二进制为0000 0011，最低为1的那一位是第1位，所以取出后为0000 0001
6：二进制为0000 0110，最低为1的那一位是第2位，所以取出后为0000 0010
31：二进制为0001 1111，最低为1的那一位是第1位，所以取出后为0000 0001
32：二进制为0010 0000，最低为1的那一位是第6位，所以取出后为0010 0000

def ipToCIDR(self, ip, range):
        """
        :type ip: str
        :type range: int
        :rtype: List[str]
        """
        ips = ip.split(".")
        x = 0
        for num in ips:
            x <<= 8
            x += int(num)
        ans = []
        while (range > 0):
            step = x & -x
            while (step > range): step /= 2
            ans.append(self.longToIP(x, step))
            x += step
            range -= step
        return ans

    def longToIP(self, x, step):
        ans = [0] * 4
        ans[0] = x & 255
        x >>= 8
        ans[1] = x & 255
        x >>= 8
        ans[2] = x & 255
        x >>= 8
        ans[3] = x
        len = 33
        while (step > 0):
            len -= 1
            step /= 2
        return str(ans[3]) + "." + str(ans[2]) + "." + str(ans[1]) + "." + str(ans[0]) + "/" + str(len) 

class Solution(object):
    def ipToCIDR(self, ip, n):
        """
        :type ip: str
        :type n: int
        :rtype: List[str]
        """
        def ipToInt(ip):
            result = 0
            for i in ip.split('.'):
                result = 256 * result + int(i)
            return result

        def intToIP(n):
            return ".".join(str((n >> i) % 256) for i in (24, 16, 8, 0))

        start = ipToInt(ip)
        result = []
        while n:
            mask = max(33-(start & ~(start-1)).bit_length(), 33-n.bit_length())
            result.append(intToIP(start) + '/' + str(mask))
            start += 1 << (32-mask)
            n -= 1 << (32-mask)
        return result
