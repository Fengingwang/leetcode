# Time:  O(n)
# Space: O(1)
这道题让我们给字符加码再解码，先有码再无码，然后题目中并没有限制我们加码的方法，
那么我们的方法只要能成功的把有码变成无码就行了，具体变换方法我们自己设计。
由于我们需要把一个字符串集变成一个字符串，然后把这个字符串再还原成原来的字符串集，
最开始我想能不能在每一个字符串中间加个空格把它们连起来，然后再按空格来隔开，
但是这种方法的问题是原来的一个字符串中如果含有空格，那么还原的时候就会被分隔成两个字符串，
所以我们必须还要加上长度的信息，我们的加码方法是长度+"/"+字符串，
比如对于"a","ab","abc"，我们就变成"1/a2/ab3/abc"，
那么我们解码的时候就有规律可寻，先寻找"/"，然后之前的就是要取出的字符个数，
从'/'后取出相应个数即可，以此类推直至没有'/'了，这样我们就得到高清无码的字符串集了


# below uses a different way to encode and decode it 
class Codec:

    def encode(self, strs):
        """Encodes a list of strings to a single string.
        :type strs: List[str]
        :rtype: str
        """
        encoded_str = ""
        for s in strs:
            encoded_str += "%0*x" % (8, len(s)) + s
        return encoded_str


    def decode(self, s):
        """Decodes a single string to a list of strings.
        :type s: str
        :rtype: List[str]
        """
        i = 0
        strs = []
        while i < len(s):
            l = int(s[i:i+8], 16)
            strs.append(s[i+8:i+8+l])
            i += 8+l
        return strs
