# Time:  O(n^2)
# Space: O(n)

# Implement a MyCalendarTwo class to store your events.
# A new event can be added if adding the event will not cause a triple booking.
#
# Your class will have one method, book(int start, int end).
# Formally, this represents a booking on the half open interval [start, end),
# the range of real numbers x such that start <= x < end.
#
# A triple booking happens when three events have some non-empty intersection
# (ie., there is some time that is common to all 3 events.)
#
# For each call to the method MyCalendar.book,
# return true if the event can be added to the calendar successfully without causing a triple booking.
# Otherwise, return false and do not add the event to the calendar.
#
# Your class will be called like this: MyCalendar cal = new MyCalendar(); MyCalendar.book(start, end)
# Example 1:
# MyCalendar();
# MyCalendar.book(10, 20); // returns true
# MyCalendar.book(50, 60); // returns true
# MyCalendar.book(10, 40); // returns true
# MyCalendar.book(5, 15); // returns false
# MyCalendar.book(5, 10); // returns true
# MyCalendar.book(25, 55); // returns true
#
# Explanation:
# The first two events can be booked.  The third event can be double booked.
# The fourth event (5, 15) can not be booked, because it would result in a triple booking.
# The fifth event (5, 10) can be booked, as it does not use time 10 which is already double booked.
# The sixth event (25, 55) can be booked, as the time in [25, 40) will be double booked with the third event;
# the time [40, 50) will be single booked, and the time [50, 55) will be double booked with the second event.
#
# Note:
# - The number of calls to MyCalendar.book per test case will be at most 1000.
# - In calls to MyCalendar.book(start, end), start and end are integers in the range [0, 10^9].

# 这道题是My Calendar I的拓展，
# 之前那道题说是不能有任何的重叠区间，而这道题说最多容忍两个重叠区域，注意是重叠区域，不是事件。
# 比如事件A，B，C互不重叠，但是有一个事件D，和这三个事件都重叠，这样是可以的，因为重叠的区域最多只有两个。
# 所以关键还是要知道具体的重叠区域，如果两个事件重叠，那么重叠区域就是它们的交集，
# 求交集的方法是两个区间的起始时间中的较大值，到结束时间中的较小值。
# 那么我们可以用一个集合来专门存重叠区间，再用一个集合来存完整的区间，
# 那么我们的思路就是，先遍历专门存重叠区间的集合，因为能在这里出现的区间，都已经是出现两次了，
# 如果当前新的区间跟重叠区间有交集的话，说明此时三个事件重叠了，直接返回false。
# 如果当前区间跟重叠区间没有交集的话，那么再来遍历完整区间的集合，
# 如果有交集的话，那么应该算出重叠区间并且加入放重叠区间的集合中。
# 最后记得将新区间加入完整区间的集合中
# We store an array self.overlaps of intervals that are double booked, 
# and self.calendar for intervals which have been single booked. 
# We use the line start < j and end > i to check if the ranges [start, end) and [i, j) overlap.
# The clever idea is we do not need to "clean up" ranges in calendar: 
# if we have [1, 3] and [2, 4], this will be calendar = [[1,3],[2,4]] and overlaps = [[2,3]]. 
# We do not need to spend time transforming the calendar to calendar = [[1,4]].

class MyCalendarTwo:
    def __init__(self):
        self.overlaps = []
        self.calendar = []

    def book(self, start, end):
        """
        :type start: int
        :type end: int
        :rtype: bool
        """
        for i, j in self.overlaps:
            if start < j and end > i:
                return False
        for i, j in self.calendar:
            if start < j and end > i:
                self.overlaps.append((max(start, i), min(end, j)))
        self.calendar.append((start, end))
        return True
