# Time:  O(n)
# Space: O(1)

# Given a string containing only three types of characters: '(', ')' and '*',
# write a function to check whether this string is valid. We define the validity of a string by these rules:
# 1. Any left parenthesis '(' must have a corresponding right parenthesis ')'.
# 2. Any right parenthesis ')' must have a corresponding left parenthesis '('.
# 3. Left parenthesis '(' must go before the corresponding right parenthesis ')'.
# 4. '*' could be treated as a single right parenthesis ')' or a single left parenthesis '(' or an empty string.
# 5. An empty string is also valid.
#
# Input: "()" Output: True
# Input: "(*)" Output: True
# Input: "(*))" Output: True
# Note:
# The string size will be in the range [1, 100].

题目大意: 判断一个括号表达是是否合法，其中包含了*号，*可以表示(,)或者空字符。
解题思路：
遍历s中的字符c，利用集合vset记录所有当前左括号-右括号的差值
  若c == '('，将vset替换为其所有元素+1
  若c == ')'，将vset替换为其所有不小于1的元素 - 1
  若c == '*'，将vset中的所有元素+1，-1后，保留非负元素
遍历结束，判断vset中是否包含0元素

这个思路是这样的：
用一个set集合来记录这个表达式中左括号能比右括号多的个数。注意，是能够。
因此，如果遇到左括号，集合里面的每个元素应该+1；
遇到右括号，如果集合里边的>0的元素可以-1；
如果遇到*，应该+1，-1或者不运算。
看最后这个集合能否包含0，即左括号的个数等于右括号的个数。
那这个算法怎么判断的”)(“呢？
巧妙的地方就在于，只有set里面大于0的元素才去-1；
因此刚开始set只有0元素，所以)不算数。所以这个方法真的很巧妙。

class Solution(object):
    def checkValidString(self, s):
        """
        :type s: str
        :rtype: bool
        """
        old_set = set([0])
        for c in s:
            new_set = set()
            if c == '(':
                for t in old_set:
                    new_set.add(t + 1)
            elif c == ')':
                for t in old_set:
                    if t > 0:
                        new_set.add(t - 1)
            elif c == '*':
                for t in old_set:
                    new_set.add(t + 1)
                    new_set.add(t)
                    if t > 0:
                        new_set.add(t - 1)
            old_set = new_set
        return 0 in old_set
