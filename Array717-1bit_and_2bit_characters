# Time:  O(n)
# Space: O(1)
# We have two special characters The first character can be represented by one bit 0
# The second character can be represented by two bits (10 or 11)
# Now given a string represented by several bits, Return whether the last character must
# be a one-bit character or not. The given string will always end with a zero.
# Input: bits = [1, 0, 0] Output: True
# The only way to decode it is two-bit character and one-bit character
# So the last character is one-bit character.
# Input: bits = [1, 1, 1, 0] Output: False
# The only way to decode it is two-bit character and two-bit character. So the last character is NOT one-bit character.
# 给定数组中仅有0和1两种元素，且出现的元素组合只能有三种编码方式：10、11、0，判断给定的数组最后一个元素是否属于0编码，而不是10编码。
# 这个题真的很简单，因为有两种字符串，一种是0，一种是10或11。即一种长度是1，一种长度是2
# 所以找个指针然后遍历一遍，看看当前值是0还是1，是0走1步，是1走两步。最后如果能到达len-1即可。

class Solution(object):
    def isOneBitCharacter(self, bits):
        """
        :type bits: List[int]
        :rtype: bool
        """
        pos = 0
        while pos < len(bits) - 1:
            pos += 2 if bits[pos] == 1 else 1
        return pos == len(bits) - 1

class Solution(object):
    def isOneBitCharacter(self, bits):
        """
        :type bits: List[int]
        :rtype: bool
        """
        parity = 0
        for i in reversed(xrange(len(bits)-1)):
            if bits[i] == 0:
                break
            parity ^= bits[i]
        return parity == 0
