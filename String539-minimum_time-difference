# Time:  O(nlogn)
# Space: O(n)

# Given a list of 24-hour clock time points in "Hour:Minutes" format,
# find the minimum minutes difference between any two time points in the list.
#
# Example 1:
# Input: ["23:59","00:00"]
# Output: 1
# Note:
# The number of time points in the given list is at least 2 and will not exceed 20000.
# The input time is legal and ranges from 00:00 to 23:59.

题目大意: 给出了一个时间数组，找出这个数组中最接近的两个时间的差。

解题方法
容易想到时间是个循环，正如题目中的所示，需要考虑循环问题。
所以解决的方案是先求出每个时间点超出0点的分钟数，对时间进行排序。
然后采取zip循环的方式，找出每两个时间之间的时间差，求最小值即可。
注意对24小时的分钟总数进行了求余，这样能保证题目中所示的例子能得到正确结果。

补充一下zip的用法：
>>> a = [1,2,3]
>>> b = [4,5,6]
>>> c = [4,5,6,7,8]
>>> zipped = zip(a,b)     # 打包为元组的列表
[(1, 4), (2, 5), (3, 6)]
>>> zip(a,c)              # 元素个数与最短的列表一致
[(1, 4), (2, 5), (3, 6)]
>>> zip(*zipped)          # 与 zip 相反，可理解为解压，返回二维矩阵式


class Solution(object):
    def findMinDifference(self, timePoints):
        """
        :type timePoints: List[str]
        :rtype: int
        """
        minutes = map(lambda x: int(x[:2]) * 60 + int(x[3:]), timePoints)
        minutes.sort()
        return min((y - x) % (24 * 60) for x, y in zip(minutes, minutes[1:] + minutes[:1]))
