# Time:  O(n + s), n is the sum of all word lengths, s is the length of S
# Space: O(l + s), l is the max word length

# Sometimes people repeat letters to represent extra feeling,
# such as "hello" -> "heeellooo", "hi" -> "hiiii".
# Here, we have groups, of adjacent letters that are all the same character,
# and adjacent characters to the group are different.
# A group is extended if that group is length 3 or more, so "e" and "o"
# would be extended in the first example, and "i" would be extended in the second example.
# As another example, the groups of "abbcccaaaa" would be "a", "bb", "ccc", and "aaaa";
# and "ccc" and "aaaa" are the extended groups of that string.
#
# For some given string S, a query word is stretchy
# if it can be made to be equal to S by extending some groups.
# Formally, we are allowed to repeatedly choose a group (as defined above) of characters c,
# and add some number of the same character c to it so that the length of the group is 3 or more.
# Note that we cannot extend a group of size one like "h" to a group of size two like "hh" -
# all extensions must leave the group extended - ie., at least 3 characters long.
#
# Given a list of query words, return the number of words that are stretchy.
#
# Example:
# Input:
# S = "heeellooo"
# words = ["hello", "hi", "helo"]
# Output: 1
# Explanation:
# We can extend "e" and "o" in the word "hello" to get "heeellooo".
# We cannot extend "helo" to get "heeellooo" because the group "ll" is not extended.
#
# Notes:
# - 0 <= len(S) <= 100.
# - 0 <= len(words) <= 100.
# - 0 <= len(words[i]) <= 100.
# - S and all words in words consist only of lowercase letters

题目大意
给出了一个字符串，其中有些字母是为了表现“情绪”而重复出现了多次，给出了一个列表，看列表中有多少个可以是这个字符串的源字符串。
前提：表现语气最少需要一个字母重复三次。
給定一個字串S，以及一組單詞words，判斷words中的單詞是否可以通過將自身的字元進行擴充套件得到。 
擴充套件規則為：擴充套件之後的字元個數至少為3個。 
解题方法
这个题首先把源字符串做分割，把列表中的每个词也做分割，判断源字符串的分割能否被列表中单词的分割一一对应上。
其实重点就是如何按照重复情况进行字符串分割。
另外，判断能否被表达的方式是，分割出来的元素个数是一致的，如果S的分割的字符长度小于3需要完全相等，否则需要大于word的长度。
解題思路： 
字母統計 統計S的字母及其重複次數，記為cs 
遍歷words中的單詞word，統計字母及其重複次數，記為ws 
檢查cs是否可以通過ws擴充套件得到

import itertools
class Solution(object):
    def expressiveWords(self, S, words):
        """
        :type S: str
        :type words: List[str]
        :rtype: int
        """
        # Run length encoding
        def RLE(S):
            return itertools.izip(*[(k, len(list(grp))) for k, grp in itertools.groupby(S)])
        R, count = RLE(S)
        result = 0
        for word in words:
            R2, count2 = RLE(word)
            if R2 != R:
                continue
            result += all(c1 >= max(c2, 3) or c1 == c2 for c1, c2 in itertools.izip(count, count2))
        return result

class Solution(object):
    def expressiveWords(self, S, words):
        """
        :type S: str
        :type words: List[str]
        :rtype: int
        """
        ans = 0
        set_S = set(S)
        S_list = []
        pre_s, pre_index = S[0], 0
        for i, s in enumerate(S):
            if pre_s != s:
                S_list.append(S[pre_index:i])
                pre_s, pre_index = s, i
            if i == len(S) - 1:
                S_list.append(S[pre_index:])
        for word in words:
            if set(word) != set_S:
                continue
            word_list = []
            pre_w, pre_index = word[0], 0
            for i, w in enumerate(word):
                if pre_w != w:
                    word_list.append(word[pre_index:i])
                    pre_w, pre_index = w, i
                if i == len(word) - 1:
                    word_list.append(word[pre_index:])
            if len(S_list) == len(word_list):
                if all(S_list[i] == word_list[i] if len(S_list[i]) < 3 else len(S_list[i]) >= len(word_list[i]) for i in range(len(S_list))):
                    ans += 1
        return ans

class Solution(object): 
    def expressiveWords(self, S, words): 
        """ 
        :type S: str 
        :type words: List[str] 
        :rtype: int 
        """ 
        cs = self.countLetters(S) 
        ans = 0 
        for word in words: 
            ws = self.countLetters(word) 
            ans += self.checkWords(cs, ws) 
        return ans 
    def countLetters(self, S): 
        cnt, lc = 0, '' 
        ans = [] 
        for c in S: 
            if c == lc: 
                 cnt += 1 
            else: 
                 if cnt: ans.append((lc, cnt)) 
                 cnt, lc = 1, c 
        if cnt: ans.append((lc, cnt)) 
     return ans 
     def checkWords(self, cs, ws): 
         if len(cs) != len(ws): return 0 
         for c, w in zip(cs, ws): 
             if c[0] != w[0]: return 0 
             if c[1] < w[1]: return 0 
             if c[1] != w[1] and c[1] < 3: return 0 
     return 1 
