# Time:  O(n)
# Space: O(1)
# Given an array with n integers, your task is to check if it could become non-decreasing by modifying at most 1 element
# We define an array is non-decreasing if array[i] <= array[i + 1] holds for every i (1 <= i < n).
# Input: [4,2,3] Output: True
# Explanation: You could modify the first 4 to 1 to get a non-decreasing array
# Input: [4,2,1] Output: False
# Explanation: You can not get a non-decreasing array by modify at most one element.
# 思路：设置计数器count=0。从i=1到i=nums.size()遍历nums。
# nums[i-1]>nums[i]时，修改数组不外乎有两种情况，使其中大的变成跟小的一样，或者使其小的变成跟大的一样。
# 变大无所谓，对前面的顺序不会发生影响。
# 但变小的话，容易对前面的序列发生影响，比如nus[i-2]>nums[i]，这样的话，如果是这种情况，或者i==1，则进行改小，其余的情况都进行改大。
# 当count大于2时，直接返回false。否则为true。

class Solution(object):
    def checkPossibility(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums)<2:
            return True
        count=0
        for i in range(1,len(nums)):
            if nums[i-1]>nums[i]:
                count+=1
                if i==1 or nums[i-2]<=nums[i]:
                    nums[i-1]=nums[i]
                else:
                    nums[i]=nums[i-1]
                if count>1:
                    return False
        return True
# 思路：对nums数组复制两份a1，a2。其中一份改大，另一份改小，且只改动一次就直接break，结束遍历。
# 然后a1和对a1进行排序后进行比较，a2和对a2进行排序后进行比较，只要其中一个是相等的，就可返回true，否则返回false。
class Solution1(object):
    def checkPossibility(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        if len(nums)<2:
            return True
        a1=nums[:]
        a2=nums[:]
        for i in range(len(nums)-1):
            if nums[i]>nums[i+1]:
                a1[i]=nums[i+1]
                a2[i+1]=nums[i]
                break
        return a1==sorted(a1) or a2==sorted(a2)
