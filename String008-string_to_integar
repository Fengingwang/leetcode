# Time:  O(n)
# Space: O(1)
# Implement atoi to convert a string to an integer
# Hint: Carefully consider all possible input cases
# 通过试错可以总结出要注意的四个点：
# 输入字符串为空、或其他不合法情况，返回0；
# 字符串开头的空格要在预处理中删掉；
# 处理可能出现的正负号“+”，“-”，正负号只能出现一次；
# 超出整数范围的值取整数范围的边界值。

# 思路一 : 按照上面要注意的点，比较可读的解法
class Solution(object):
    def myAtoi(self, str):
        """
        :type str: str
        :rtype: int
        """
        if not str:
            return 0
        str = str.strip()
        number, flag = 0, 1
        if str[0] == '-':
            str = str[1:]
            flag = -1
        elif str[0] == '+':
            str = str[1:]
        for c in str:
            if c >= '0' and c <= '9':
                number = 10*number + ord(c) - ord('0')
            else:
                break
        number = flag * number
        number = number if number <= 2147483647 else 2147483647
        number = number if number >= -2147483648 else -2147483648
        return number

# 思路二 : 用正则表达式来简化上面的过程
class Solution(object):
    def myAtoi(self, str):
        """
        :type str: str
        :rtype: int
        """
        str = str.strip()
        try:
            res = re.search('(^[\+\-]?\d+)', str).group()
            res = int(res)
            res = res if res <= 2147483647 else 2147483647
            res = res if res >= -2147483648 else -2147483648
        except:
            res = 0
        return res
