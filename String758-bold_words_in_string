# Time:  O(n * d * l), l is the average length of words
# Space: O(n)
# Given a set of keywords words and a string S, make all appearances of all keywords in S bold 
# Any letters between <b> and </b> tags become bold
# The returned string should use the least number of tags possible, and of course the tags should form a valid combination
# Input: words = ["ab", "bc"] and S = "aabcd" Output: "a<b>abc</b>d". 
# Note that returning "a<b>a<b>b</b>c</b>d" would use more tags, so it is incorrect
# words has length in range [0, 50]
# words[i] has length in range [1, 10]
# S has length in range [0, 500]
# All characters in words[i] and S are lowercase letters
# 题目大意： 给定一组关键词words和字符串S，将S中所有出现的关键词加粗。需要确保使用的加粗标记最少。

class Solution(object):
    def boldWords(self, words, S):
        """
        :type words: List[str]
        :type S: str
        :rtype: str
        """
        N = len(S)
        bold = [0] * (N + 2)
        for word in words:
            start = 0
            while True:
                idx = S[start:].find(word)
                if idx < 0: break
                for x in range(start + idx, start + idx + len(word)):
                    bold[x + 1] = 1
                start += idx + 1
        S = list(S) + ['']
        ans = []
        for x in range(1, N + 1):
            if bold[x] == 1 and bold[x - 1] == 0:
                ans.append('<b>')
            ans.append(S[x - 1])
            if bold[x] == 1 and bold[x + 1] == 0:
                ans.append('</b>')
        return ''.join(ans)

class Solution2(object):
    def boldWords(self, words, S):
        """
        :type words: List[str]
        :type S: str
        :rtype: str
        """
        lookup = [0] * len(S)
        for d in words:
            pos = S.find(d)
            while pos != -1:
                lookup[pos:pos+len(d)] = [1] * len(d)
                pos = S.find(d, pos+1)

        result = []
        for i in xrange(len(S)):
            if lookup[i] and (i == 0 or not lookup[i-1]):
                result.append("<b>")
            result.append(S[i])
            if lookup[i] and (i == len(S)-1 or not lookup[i+1]):
                result.append("</b>")
        return "".join(result)
