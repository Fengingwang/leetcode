# Time:  O(1)
# Space: O(1)
# Determine whether an integer is a palindrome and do this without extra space
# Some hints:
# Could negative integers be palindromes? (ie, -1)
# If you are thinking of converting the integer to string, note the restriction of using extra space
# 1，负数都不是回文数；
# 2，不能通过将数字转为字符串来判断回文，因为使用了额外的空间（即只能使用空间复杂度 O(1) 的方法）；
# 3，注意整数溢出问题；4，这个问题有一个比较通用的解法。

# 思路一: 既然不能将数字转字符串，那仍然可以考虑生成一个反转整数，通过比较反转整数和原整数是否相等来判断回文。
class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x < 0:
            return False
        tmp = x
        y = 0
        while tmp:
            y = y*10 + tmp%10
            tmp = tmp/10
        return y == x
# 说明: 因为 Python 语言本身的特性，这里反转整数时不需要考虑溢出，但不代表如果是C/C++等语言也不需要考虑。 
#      另外，特定于本问题，溢出与否对结果没有影响。因为原数字是正常无溢出的，那么如果反转溢出则说明反转后的数字与原数字不相等。

# 思路二: 承接思路一，算是对思路一的优化。实际上将原数字反转一半就可以判断是否是回文了。另外，以0结尾的非零数都不是回文。
class Solution(object):
    def isPalindrome(self, x):
        """
        :type x: int
        :rtype: bool
        """
        if x < 0 or (x != 0 and x%10 == 0):
            return False
        y = 0
        while x > y:
            y = y*10 + x%10
            x = x/10
        return x == y or y/10 == x
