# Time:  O(n)
# Space: O(1)
# Given a singly linked list, return a random node value from the linked list.
# Each node must have the same probability of being chosen.
# Follow up:
# What if the linked list is extremely large and its length is unknown to you?
# Could you solve this efficiently without using extra space?
# Example:
# // Init a singly linked list [1,2,3].
# ListNode head = new ListNode(1);
# head.next = new ListNode(2);
# head.next.next = new ListNode(3);
# Solution solution = new Solution(head);
# // getRandom() should return either 1, 2, or 3 randomly.
# Each element should have equal probability of returning.
# solution.getRandom();

题目大意： 给定一个单链表，返回链表中一个随机节点的值。每一个节点应该被等可能的抽取。
进一步思考： 如果链表很大并且长度未知呢？你可以不使用额外的空间高效地解决此问题吗？

# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

解题思路：
蓄水池抽样（Reservoir Sampling）
蓄水池采样解决的是从N个数中等概率的取出k个数的问题，本题特殊情况k=1。
蓄水池抽样算法的等概率性可以用数学归纳法证明：
I   当链表长度为1时，random.randint(0, 0)恒等于0，因此抽到第1个元素的概率为1
II  假设抽取前n个元素的概率相等，均为1/n
III 当抽取第n+1个元素时：
若random.randint(0, n)等于0，则返回值替换为第n+1个元素，其概率为1/(n+1)；
否则，抽取的依然是前n个元素，其概率为1/n * n/(n+1) = 1/(n+1)

import random
class Solution(object):
    def __init__(self, head):
        """
        @param head The linked list's head. 
         Note that the head is guanranteed to be not null, 
         so it contains at least one node.
        :type head: ListNode
        """
        self.head = head
    def getRandom(self):
        """
        Returns a random node's value.
        :rtype: int
        """
        cnt = 0
        head = self.head
        while head:
            if random.randint(0, cnt) == 0:
                ans = head.val
            head = head.next
            cnt += 1
        return ans

思路一
直观的思路：在初始化时统计链表长度，每次随机返回节点时，在该长度内随机出一个索引，从链表头开始找到该索引对应的值即可。空间复杂度O(1)。
class Solution(object):
    def __init__(self, head):
        self.head = head
        self.length = 0
        while head:
            self.length += 1
            head = head.next
    def getRandom(self):
        pointer = self.head
        index = random.randint(0, self.length - 1)
        for i in xrange(index):
            pointer = pointer.next
        return pointer.val


思路二
如果不考虑follow up的要求，可以将所有元素先保存到数组，那么在随机取数时效率会高的多，但空间复杂度O(n)。
class Solution(object):

    def __init__(self, head):
        self.vals = []
        while head:
            self.vals.append(head.val)
            head = head.next

    def getRandom(self):
        return self.vals[random.randint(0, len(self.vals)-1)]

思路三
蓄水池采样（Reservoir Sampling）算法。
Follow up中说链表可能很长，我们没法提前知道长度，这里用到了著名了水塘抽样的思路，
由于限定了head一定存在，所以我们先让返回值res等于head的节点值，
然后让cur指向head的下一个节点，
定义一个变量i，初始化为2，若cur不为空我们开始循环，
我们在[0, i - 1]中取一个随机数，如果取出来0，那么我们更新res为当前的cur的节点值，
然后此时i自增一，cur指向其下一个位置，
这里其实相当于我们维护了一个大小为1的水塘，
然后我们随机数生成为0的话，我们交换水塘中的值和当前遍历到底值，这样可以保证每个数字的概率相等
