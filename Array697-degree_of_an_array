# Time:  O(n)
# Space: O(n)
# Given a non-empty array of non-negative integers nums,
# the degree of this array is defined as the maximum frequency of any one of its elements
# Input: [1, 2, 2, 3, 1] Output: 2
# The input array has a degree of 2 because both elements 1 and 2 appear twice
# Of the subarrays that have the same degree:
# [1, 2, 2, 3, 1], [1, 2, 2, 3], [2, 2, 3, 1], [1, 2, 2], [2, 2, 3], [2, 2]
# The shortest length is 2. So return 2.
# Input: [1,2,2,3,1,4,2] Output: 6
# 思路： 肯定很容易想到 先找到数组里出现次数最多的数，在用最后一次出现的位置减去第一次出现的位置

from collections import Counter, defaultdict
def findShortestSubArray(self, nums):
        first, last = {}, {}
        for i, v in enumerate(nums):
            first.setdefault(v, i)
            last[v] = i
        c = collections.Counter(nums)
        degree = max(c.values())
        return min(last[v] - first[v] + 1 for v in c if c[v] == degree)
