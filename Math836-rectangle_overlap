# A rectangle is represented as a list [x1, y1, x2, y2],
# where (x1, y1) are the coordinates of its bottom-left corner,
# and (x2, y2) are the coordinates of its top-right corner
# Two rectangles overlap if the area of their intersection is positive
# To be clear, two rectangles that only touch at the corner or edges do not overlap
# Given two rectangles, return whether they overlap
# Input: rec1 = [0,0,2,2], rec2 = [1,1,3,3]
# Output: true
# Input: rec1 = [0,0,1,1], rec2 = [1,0,2,1]
# Output: false

# 把rec2当做基准的一个矩形。把rec1跟rec2进行比较。
# 先判断不想交的情况：
# rec1的x2小于rec2的x1；此时rec1在rec2的左边。
# rec1的y2小于rec2的y1；此时rec1在rec2的下边。
# rec2的x2小于rec1的x1；此时rec1在rec2的右边
# rec2的y2小于rec1的y1；此时rec1在rec2的上边。
# 取not代表相交的情况。

class Solution:
    def isRectangleOverlap(self, rec1, rec2):
        """
        :type rec1: List[int]
        :type rec2: List[int]
        :rtype: bool
        """
        rec1_x1, rec1_y1, rec1_x2, rec1_y2 = rec1
        rec2_x1, rec2_y1, rec2_x2, rec2_y2 = rec2
        return not (rec1_x1 >= rec2_x2 or rec1_x2 <= rec2_x1 or rec1_y1 >= rec2_y2 or rec1_y2 <= rec2_y1)

# or 
# Time:  O(1)
# Space: O(1)
class Solution(object):
    def isRectangleOverlap(self, rec1, rec2):
        """
        :type rec1: List[int]
        :type rec2: List[int]
        :rtype: bool
        """
        def intersect(p_left, p_right, q_left, q_right):
            return max(p_left, q_left) < min(p_right, q_right)

        return (intersect(rec1[0], rec1[2], rec2[0], rec2[2]) and
                intersect(rec1[1], rec1[3], rec2[1], rec2[3]))
