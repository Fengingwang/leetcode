# Time:  O(m * n)
# Space: O(1)
# Given an 2D board, count how many different battleships are in it.
# The battleships are represented with 'X', empty slots are represented with '.'
# You may assume the following rules:
# You receive a valid board, made of only battleships or empty slots.
# Battleships can only be placed horizontally or vertically. 
# In other words, they can only be made of the shape 
# 1xN (1 row, N columns) or Nx1 (N rows, 1 column), where N can be of any size.
# At least one horizontal or vertical cell separates between two battleships - no adjacent battleships
# Example:
# X..X
# ...X
# ...X
# In the above board there are 2 battleships.
# Invalid Example:
# ...X
# XXXX
# ...X
# This is not a valid board - as battleships will always have a cell separating between them.
# Your algorithm should not modify the value of the board.
# 题目大意
# 战列舰计数。就是求用x组成的区域有几个。单独的一个或者连续的一条线都算一个。另外就是战列舰不会交叉，不会平行。

# 思路： 判断军舰个数，即找到军舰的头即可。
# 头的位置条件是，其左前位置是空的，上的位置是空的即可。
# 判断时，注意棋盘的边界即可，第一行的坐标没有上方位置，第一列的坐标没有左前位置，
#      且(0,0)坐标如果为’X’即为头，其没有左前、上方位置。

# 解法I 遍历board
# 由于board中的战舰之间确保有'.'隔开，因此遍历board，若某单元格为'X'，只需判断其左边和上边的相邻单元格是否也是'X'。
# 如果左邻居或者上邻居单元格是'X'，则说明当前单元格是左边或者上边战舰的一部分；
# 否则，令计数器+1

class Solution(object):
    def countBattleships(self, board):
        """
        :type board: List[List[str]]
        :rtype: int
        """
        h = len(board)
        w = len(board[0]) if h else 0
        ans = 0
        for x in range(h):
            for y in range(w):
                if board[x][y] == 'X':
                    if x > 0 and board[x - 1][y] == 'X':
                        continue
                    if y > 0 and board[x][y - 1] == 'X':
                        continue
                    ans += 1
        return ans

class Solution(object):
    def countBattleships(self, board):
        """
        :type board: List[List[str]]
        :rtype: int
        """
        if not board or not board[0]:
            return 0
        cnt = 0
        for i in xrange(len(board)):
            for j in xrange(len(board[0])):
                cnt += int(board[i][j] == 'X' and
                           (i == 0 or board[i - 1][j] != 'X') and
                           (j == 0 or board[i][j - 1] != 'X'))
        return cnt
