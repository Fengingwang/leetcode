# Time:  O(n), n is the size of b.
# Space: O(1)
# Your task is to calculate a^b mod 1337 where a is a positive integer
# and b is an extremely large positive integer given in the form of an array.
# Example1:
# a = 2 b = [3]
# Result: 8
# Example2:
# a = 2 b = [1,0]
# Result: 1024

题目描述： 计算a ^ b mod 1337的值。a是正整数，b是一个极大的正整数，以数组形式给出。
解题思想
这道题需要计算 a^b % c 的值，其中b非常的大，大到只能使用数组来表示。
这道题是ACM里面常见的快速幂的解题方式，这其中有一个数学的推论，可以看我代码里附带的那个解释。 
总之，这个公式的意思就是，(a*b)%c=(a%c)*(b%c),因此我们可以在每一步计算结果之后都这么处理，防止溢出。
第二个算法部分其实很容易理解，就是可以做类似于二分的分割，
比如当b是偶数的时候，我们可以转化为计算a^（b/2)后再平方，而对于基础，则再乘一个a就可以

解题思路：快速幂
class Solution(object):
    def superPow(self, a, b):
        """
        :type a: int
        :type b: List[int]
        :rtype: int
        """
        ans, pow = 1, a
        for n in b[::-1]:
            ans = (ans * (pow ** n) % 1337) % 1337
            pow = (pow ** 10) % 1337
        return ans

优化的快速幂
class Solution(object):
    def superPow(self, a, b):
        """
        :type a: int
        :type b: List[int]
        :rtype: int
        """
        ans, pow = 1, a
        for n in b[::-1]:
            ans = (ans * self.quickPow(pow, n, 1337)) % 1337
            pow = self.quickPow(pow, 10, 1337)
        return ans

    def quickPow(self, a, b, m):
        ans = 1
        while b > 0:
            if b & 1: ans *= a
            a = (a * a) % m
            b >>= 1
        return ans
