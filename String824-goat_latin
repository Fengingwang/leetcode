# Time:  O(n + w^2), n = w * l,
#                    n is the length of S,
#                    w is the number of word,
#                    l is the average length of word
# Space: O(n)
# A sentence S is given, composed of words separated by spaces
# Each word consists of lowercase and uppercase letters only
# We would like to convert the sentence to "Goat Latin" (a made-up language similar to Pig Latin)
# The rules of Goat Latin are as follows:
# If begin with a vowel (a, e, i, o, u), append "ma" to the end: 'apple' to 'applema'
# If begin with others, remove the first letter and append it to the end, then add "ma": "goat" to "oatgma".
# Add one letter 'a' to the end of each word per its word index in the sentence, starting with 1.
# eg, the first word gets "a" added to the end, the second word gets "aa" added to the end and so on
# Return the final sentence representing the conversion from S to Goat Latin
# Input: "I speak Goat Latin"
# Output: "Imaa peaksmaaa oatGmaaaa atinLmaaaaa"
# Input: "The quick brown fox jumped over the lazy dog"
# Output: "heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa 
           overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa"
# Notes:
# - S contains only uppercase, lowercase and spaces Exactly one space between each word
# - 1 <= S.length <= 100.

# 如果单词首字母是元音，在单词末尾添加ma
# 否则，将单词首字母移动至末尾，并添加ma
# 对于第i个单词，在其末尾添加i个a

def toGoatLatin(self, S):
        vowel = set('aeiouAEIOU')
        def latin(w, i):
            if w[0] not in vowel:
                w = w[1:] + w[0]
            return w + 'ma' + 'a' * (i + 1)
        return ' '.join(latin(w, i) for i, w in enumerate(S.split()))

def toGoatLatin(self, S):
        return ' '.join((w if w[0].lower() in 'aeiou' else w[1:] + w[0]) + 'ma' + 'a' * (i + 1) for i, w in enumerate(S.split()))

class Solution(object):
    def toGoatLatin(self, S):
        """
        :type S: str
        :rtype: str
        """
        def convert(S):
            vowel = set('aeiouAEIOU')
            for i, word in enumerate(S.split(), 1): #enumerate(sequence, [start=0])
                if word[0] not in vowel:
                    word = word[1:] + word[:1]
                yield word + 'ma' + 'a'*i
        return " ".join(convert(S)

