# Reverse a singly linked list
# Hint: A linked list can be reversed either iteratively or recursively, Could you implement both?
# 翻转单向链表

# Definition for singly-linked list
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

#思路一: 利用栈结构，将链表内容依次压入栈，再从栈依次弹出即可构造逆序。下面的代码用普通数组模拟栈。
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        p = head
        newList = []
        while p:
            newList.insert(0, p.val)
            p = p.next
        p = head
        for v in newList:
            p.val = v
            p = p.next
        return head


# 思路二: 与思路一栈的思想类似，不过是直接在原链表操作，通过迭代将节点重组，前面的节点转移到重组链表的后面。实际上就是头结点倒插操作。
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        new_head = None
        while head:
            p = head
            head = head.next
            p.next = new_head
            new_head = p
        return new_head

def nonrecurse(head):               
    if head is None or head.next is None:  
        return head;  
    pre=None;  
    cur=head;  
    h=head;  
    while cur:  
        h=cur;  
        tmp=cur.next;  
        cur.next=pre;  
        pre=cur;  
        cur=tmp;  
    return h;  


# Iterative solution
# Time:  O(n)
# Space: O(1)
class Solution:
    def reverseList(self, head):
        dummy = ListNode(float("-inf"))
        while head:
            dummy.next, head.next, head = head, dummy.next, head.next
        return dummy.next


# Recursive solution
# Time:  O(n)
# Space: O(n)
class Solution2:
    def reverseList(self, head):
        [begin, end] = self.reverseListRecu(head)
        return begin
    def reverseListRecu(self, head):
        if not head:
            return [None, None]
        [begin, end] = self.reverseListRecu(head.next)
        if end:
            end.next = head
            head.next = None
            return [begin, head]
        else:
            return [head, head]

