# Time:  O(n)
# Space: O(1)
# Given an unsorted array return whether an increasing subsequence of length 3 exists or not 
# Formally the function should:
# Return true if there exists i, j, k such that arr[i] < arr[j] < arr[k]
# given 0 <= i < j < k <= n-1 else return false
# Your algorithm should run in O(n) time complexity and O(1) space complexity
# Given [1, 2, 3, 4, 5], return true
# Given [5, 4, 3, 2, 1], return false
# 题目大意: 判断一个无序的数组中是否包含长度为3的递增的序列。

# 解题方法
# 用LIS的解法一定能做出来的，但是不符合题目给出的O(n)的时间复杂度。看了别人的解法发现真的很巧妙。我们完全可以抛弃什么DP，dfs！
# 既然要求我们从前到后遍历，那么在遍历的时候保存已经看到的最小值和次小值，然后再发现比这两个值大的的第3小的值存在的时候，那么就说明有长度为3的递增的子序列了。
# 当然，对于这种情况： 1 4  5  1  2  6
# 长度为3递增子序列有两种，但是由于我们保存的是最小的优先，所以最后的结果求得的是1 2 6这组。
# 整体的思想其实是很灵活的，保存的是遍历时见到的最小和次小，因此千万不要使用一成不变的min和max函数。

class Solution(object):
    def increasingTriplet(self, nums):
        """
        :type nums: List[int]
        :rtype: bool
        """
        first, second = float('inf'), float('inf')
        for num in nums:
            if num <= first:
                first = num
            elif num <= second:
                second = num
            else:
                return True
        return False
# 如果觉得上面的解法不容易想出来，那么如果能想出下面这种解法，估计面试官也会为你点赞。
# 这种方法的虽然不满足常数空间的要求，但是作为对暴力搜索的优化，也是一种非常好的解题思路。
# 这个解法的思路是建立两个数组，forward数组和backward数组，
# 其中forward[i]表示[0, i]之间最小的数，
# backward[i]表示[i, n-1]之间最大的数，那么对于任意一个位置i，
# 如果满足 forward[i] < nums[i] < backward[i]，则表示这个递增三元子序列存在
# nums:        8  3  5  1  6
# foward:      8  3  3  1  1
# backward:    8  6  6  6  6
# 我们发现数字5满足forward[i] < nums[i] < backward[i]，所以三元子序列存在。

# This is C++ code
class Solution {
public:
    bool increasingTriplet(vector<int>& nums) {
        if (nums.size() < 3) return false;
        int n = nums.size();
        vector<int> f(n, nums[0]), b(n, nums.back());
        for (int i = 1; i < n; ++i) {
            f[i] = min(f[i - 1], nums[i]);
        }
        for (int i = n - 2; i >= 0; --i) {
            b[i] = max(b[i + 1], nums[i]);
        }
        for (int i = 0; i < n; ++i) {
            if (nums[i] > f[i] && nums[i] < b[i]) return true;
        }
        return false;
    }
};
