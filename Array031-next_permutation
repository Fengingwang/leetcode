# Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers
# If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order)
# The replacement must be in-place, do not allocate extra memory
# Inputs are in the left-hand column and its corresponding outputs are in the right-hand column
# 1,2,3 -> 1,3,2
# 3,2,1 -> 1,2,3
# 1,1,5 -> 1,5,1
# 题目大意：
# 实现next permutation（下一个排列），重新排列数组中的数，使得到的新数组的字典序恰好大于原数组。
# 如果不存在这样的排列，就将原数组从小到大排序。
# 替换必须就地进行，不要分配额外的内存。

# 解题思路：
# 输出字典序中的下一个排列。比如123生成的全排列是：123，132，213，231，312，321。那么321的next permutation是123。
# 下面这种算法据说是STL中的经典算法。在当前序列中，从尾端往前寻找两个相邻升序元素，升序元素对中的前一个标记为partition。
# 然后再从尾端寻找另一个大于partition的元素，并与partition指向的元素交换，然后将partition后的元素（不包括partition指向的元素）逆序排列。
# 比如14532，那么升序对为45，partition指向4，由于partition之后除了5没有比4大的数，所以45交换为54，即15432，
# 然后将partition之后的元素逆序排列，即432排列为234，则最后输出的next permutation为15234。
# 解题思路：
# 首先从右向左遍历数组，找到第一个相邻的左<右的数对，记右下标为x，则左下标为x - 1
# 若x > 0，则再次从右向左遍历数组，直到找到第一个大于nums[x - 1]的数字为止，记其下标为y，交换nums[x - 1], nums[y]
# 最后将nums[x]及其右边的元素就地逆置

class Solution(object):
    def nextPermutation(self, nums):
        """
        :type nums: List[int]
        :rtype: void Do not return anything, modify nums in-place instead.
        """
        size = len(nums)
        for x in range(size - 1, -1, -1):
            if nums[x - 1] < nums[x]:
                break
        if x > 0:
            for y in range(size - 1, -1, -1):
                if nums[y] > nums[x - 1]:
                    nums[x - 1], nums[y] = nums[y], nums[x - 1]
                    break
        for z in range((size - x) / 2):
            nums[x + z], nums[size - z - 1] = nums[size - z - 1], nums[x + z]
