# Time:  O(n)
# Space: O(n)
# In a forest, each rabbit has some color.
# Some subset of rabbits (possibly all of them) tell you how many other rabbits have the same color as them.
# Those answers are placed in an array.
# Return the minimum number of rabbits that could be in the forest.
#
# Examples:
# Input: answers = [1, 1, 2] Output: 5
# Explanation:
# The two rabbits that answered "1" could both be the same color, say red.
# The rabbit than answered "2" cannot be red or the answers would be inconsistent.
# Say the rabbit that answered "2" was blue.
# Then there should be 2 other blue rabbits in the forest that did not answer into the array.
# The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that did not.
# Input: answers = [10, 10, 10] Output: 11
# Input: answers = []  Output: 0
# Note:
# - answers will have length at most 1000.
# - Each answers[i] will be an integer in the range [0, 999].

题目大意: 兔子会报出和自己颜色相同的兔子数量，求最少的兔子数。

解题方法
充分理解大神的思路：
If x+1 rabbits have same color, then we get x+1 rabbits who all answer x. now n rabbits answer x. 
If n%(x+1)==0, we need n/(x+1) groups of x+1 rabbits. 
If n%(x+1)!=0, we need n/(x+1) + 1 groups of x+1 rabbits. 
the number of groups is math.ceil(n/(x+1)) and it equals to (n+i)/(i+1) , which is more elegant.
可以理解为，对每个数字进行记数，如果其出现的次数n能整除（x+1），说明能够成一个颜色，所以x+1个兔子。如果不能整除的话，说明有n/(x+1) + 1组兔子。

import collections
class Solution(object):
    def numRabbits(self, answers):
        """
        :type answers: List[int]
        :rtype: int
        """
        count = collections.Counter(answers)
        print count
        return sum((count[x] + x) / (x + 1) * (x + 1) for x in count)
