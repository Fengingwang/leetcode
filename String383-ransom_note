# Time:  O(n)
# Space: O(1)
# Given an arbitrary ransom note string and another string containing letters from all the magazines
# return true if the ransom note can be constructed from the magazines otherwise, it will return false
# Each letter in the magazine string can only be used once in your ransom note
# Note: You may assume that both strings contain only lowercase letters.
#
# canConstruct("a", "b") -> false
# canConstruct("aa", "ab") -> false
# canConstruct("aa", "aab") -> true

# 思路一
# 计算两个字符串每个字母出现的次数再比较即可。可以用数组或字典保存每个字母出现的次数，对于两个字符串分别用加法和减法统计字母出现次数。
class Solution(object):
    def canConstruct(self, ransomNote, magazine):
        """
        :type ransomNote: str
        :type magazine: str
        :rtype: bool
        """
        if len(ransomNote) > len(magazine):
            return False
        letters = [0] * 26
        for c in magazine:
            letters[ord(c) - 97] += 1
        for c in ransomNote:
            letters[ord(c) - 97] -= 1
            if letters[ord(c) - 97] < 0:
                return False
        return True

class Solution(object):
    def canConstruct(self, ransomNote, magazine):
        """
        :type ransomNote: str
        :type magazine: str
        :rtype: bool
        """
        if len(ransomNote) > len(magazine):
            return False
        letters = {}
        for c in magazine:
            letters[c] = letters[c] + 1 if c in letters else 1
        for c in ransomNote:
            if c not in letters:
                return False
            letters[c] -= 1
            if letters[c] < 0:
                return False
        return True
