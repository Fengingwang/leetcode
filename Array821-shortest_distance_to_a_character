# Time:  O(n)
# Space: O(1)
# Given a string S and a character C,
# return an array of integers representing the shortest distance from the character C in the string
# Input: S = "loveleetcode", C = 'e'
# Output: [3, 2, 1, 0, 1, 0, 0, 1, 2, 2, 1, 0]
# 给定字符串S和属于该字符串的一个字符C，要求出字符串中的每个字符到最近的C的距离。
# 第一步，先假设在很远的位置有个C字符，那么从左到右开始遍历，找出每个字符到其最近的左边的字符C的距离； 
# 第二步，先假设在很远的位置有个C字符，那么从右到左开始遍历，找出每个字符到其最近的右边的字符C的距离，并和第一步求出的距离进行比较，找出最小值为结果；
# 两个技巧：
# 设了一个比字符串长度更远的一个字符C，保证后面求最小值更新距离时一定会被更新。
# 无论如何都用到了abs求绝对值，哪怕可能是不需要的，目的是不用费脑子思考谁大谁小了。

class Solution:
    def shortestToChar(self, S, C):
        """
        :type S: str
        :type C: str
        :rtype: List[int]
        """
		_len = len(S)
        ans = [0] * len(S)
        index = -1000000
        for i, s in enumerate(S):
            if s == C:
                index = i
            ans[i] = abs(i - index)
        index = -1000000
        for i in range(_len - 1, -1 , -1):
            if S[i] == C:
                index = i
            ans[i] = min(abs(i - index), ans[i])
        return ans

# 技巧： saves operations during second pass by starting from last pos
class Solution:
    def shortestToChar(self, S, C):
        """
        :type S: str
        :type C: str
        :rtype: List[int]
        """
        pos = -len(S)
        rst = [0]*len(S)
        for i, c in enumerate(S):
            if c == C: pos = i
            rst[i] = i-pos
        for i in range(pos-1, -1, -1):
            if S[i] == C: pos = i
            rst[i] = min(rst[i], pos-i)
        return rst
