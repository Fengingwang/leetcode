# Given an array of integers, 1 <= a[i] <= n (n = size of array),
# some elements appear twice and others appear once.
# Find all the elements that appear twice in this array.
# Could you do it without extra space and in O(n) runtime?
# Input  [4,3,2,7,8,2,3,1]
# Output [2,3]

# 解题思路：
# 思路一：
# 对数组进行sort排序，排序后遍历数组，如果遇到前后坐标中的值相同，则说明该值重复，放入结果数组中。最终遍历结束返回结果数组。

# 思路二：
# 首先进行归位，即每个坐标i下的值nums[i]都移动到nums[i]-1坐标下。
# 遍历数组，如果碰到nums[i]！=nums[nums[i]-1]，则交换坐标i与坐标nums[i]-1下的值，即进行归位。
# 归位完成后，遍历新数组，如果每个坐标i与其值nums[i]-1不相等，说明nums[i]就是重复的数字，放入结果数组中。最终遍历结束返回结果数组。

# 思路三：
# 根据正负数进行判断。在遍历数组时，对每个坐标i下的值nums[i]，找到其abs(nums[i])-1坐标下的值，将其置为相反数，
# 即nums[abs(nums[i])-1]=0-nums[abs(nums[i])-1]。
# 第一次访问置为了负数，这样表示nums[i]这个值我已经遍历过了。
# 当判断nums[abs(nums[i])-1]这个 值为正数了，说明我访问过两次，这个值重复了，将abs(nums[i])放入结果数组中。最终遍历结束返回结果数组。

# 思路四：
# 类似于思路三，不同的是在每次遍历时，先进行判断，如果值为负数，说明前面有访问过一次，表示这次是第二次了，重复了，将abs(nums[i])放入结果数组中。
# 然后设置nums[abs(nums[i])-1]=0-nums[abs(nums[i])-1]表示这次访问过。最终遍历结束返回结果数组。

# 思路一代码（458ms）
class Solution(object):
    def findDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        dup=[]
        if len(nums)==0:
            return dup
        nums.sort()
        for i in range(len(nums)-1):
            if nums[i]==nums[i+1]:
                dup.append(nums[i])
                i=i+1
        return dup

# 思路二代码（379ms）
class Solution1(object):
    def findDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        dup=[]
        if len(nums)==0:
            return dup
        i=0
        while i<len(nums):
            if nums[nums[i]-1]!=nums[i]:
                temp=nums[i]
                nums[i]=nums[nums[i]-1]
                nums[temp-1]=temp
            else:
                i+=1
        for j in range(len(nums)):
            if j+1!=nums[j]:
                dup.append(nums[j])
        return dup

# 思路三代码（345ms）
class Solution2(object):
    def findDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        dup=[]
        if len(nums)==0:
            return dup
        for i in range(len(nums)):
            nums[abs(nums[i])-1]=0-nums[abs(nums[i])-1]
            if nums[abs(nums[i])-1]>0:
                dup.append(abs(nums[i]))
        return dup

# 思路四代码（369ms）
class Solution3(object):
    def findDuplicates(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        dup=[]
        if len(nums)==0:
            return dup
        for i in range(len(nums)):           
            if nums[abs(nums[i])-1]<0:
                dup.append(abs(nums[i]))
            nums[abs(nums[i])-1]=0-nums[abs(nums[i])-1]
        return dup
